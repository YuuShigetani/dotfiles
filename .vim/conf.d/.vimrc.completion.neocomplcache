"------------------------------------
" neocomplecache.vim
"------------------------------------
" disable autocomplpop
let g:acp_enableAtStartup = 0
" disable neocomple
let g:neocomplete#enable_at_startup = 0
" enable neocomplcache
let g:neocomplcache_enable_at_startup = 1
" start character's length
let g:neocomplcache_auto_completion_start_length = 2
" enable smart case
let g:neocomplcache_enable_smart_case = 1
" enable camel case
let g:neocomplcache_enable_camel_case_completion = 1
" enabel underbar case
let g:neocomplcache_enable_underbar_completion = 1
" minimum syntax length
let g:neocomplcache_min_syntax_length = 3
" auto lock pattern
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" display line number
let g:neocomplcache_enable_quick_match = 1
" enable auto select completion menu
let g:neocomplcache_enable_auto_select = 0
" max popup menu length
let g:neocomplcache_max_list = 20
let g:neocomplcache_skip_auto_completion_time = '0.6'
" let g:neocomplcache_source_look_dictionary_path = $HOME . '/words'
let g:neocomplcache_source_look_dictionary_path = ''
let g:neocomplcache_vim_completefuncs = {
      \ 'Ref' : 'ref#complete',
      \ 'Unite' : 'unite#complete_source',
      \ 'VimShellExecute' :
      \      'vimshell#vimshell_execute_complete',
      \ 'VimShellInteractive' :
      \      'vimshell#vimshell_execute_complete',
      \ 'VimShellTerminal' :
      \      'vimshell#vimshell_execute_complete',
      \ 'VimShell' : 'vimshell#complete',
      \ 'VimFiler' : 'vimfiler#complete',
      \ 'Vinarise' : 'vinarise#complete',
      \ }

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default'    : '',
    \ 'vimshell'   : $HOME.'/.vimshell_hist',
    \ 'scala'      : $HOME.'/.vim/bundle/vim-scala/dict/scala.dict',
    \ 'java'       : $HOME.'/.vim/dict/java.dict',
    \ 'c'          : $HOME.'/.vim/dict/c.dict',
    \ 'cpp'        : $HOME.'/.vim/dict/cpp.dict',
    \ 'javascript' : $HOME.'/.vim/dict/javascript.dict',
    \ 'ocaml'      : $HOME.'/.vim/dict/ocaml.dict',
    \ 'perl'       : $HOME.'/.vim/dict/perl.dict',
    \ 'php'        : $HOME.'/.vim/dict/php.dict',
    \ 'scheme'     : $HOME.'/.vim/dict/scheme.dict',
    \ 'vm'         : $HOME.'/.vim/dict/vim.dict',
    \ 'ruby'       : $HOME.'/.vim/dict/ruby.dict'
    \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" use snippet directory
let g:neocomplcache_snippets_dir = '~/.vim/bundle/neosnippet/autoload/neosnippet/snippets,~/.vim/snippet'

" snippet
imap <C-y> <Plug>(neocomplcache_snippets_expand)
smap <C-k> <Plug>(neocomplcache_snippets_expand)

" close popup
" inoremap <expr><C-y> neocomplcache#close_popup()
" cancel & close
" inoremap <expr><C-e> neocomplcache#cancel_popup()
" tab completion
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" undo
inoremap <expr><C-g>     neocomplcache#undo_completion()
" complete common
inoremap <expr><C-s> neocomplcache#complete_common_string()
" SuperTab like snippets behavior.
imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"
" delete to line end
" inoremap <C-k> <C-o>D
" completion by c-n
inoremap <expr><C-n>  pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>"
" keyword completion by c-p
inoremap <expr><C-p> pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"
" if popup menu, choose it
inoremap <expr><CR>  pumvisible() ? neocomplcache#close_popup() : "<CR>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-x><C-o> &filetype == 'vim' ? "\<C-x><C-v><C-p>" : neocomplcache#manual_omni_complete()

" cache buffer
autocmd BufReadPost,BufEnter,BufWritePost :NeoComplCacheCachingBuffer <buffer>

" omni completion every filetype
autocmd FileType python     setlocal omnifunc=pythoncomplete#Complete
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html       setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType css        setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType xml        setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType php        setlocal omnifunc=phpcomplete#CompletePHP
autocmd FileType c          setlocal omnifunc=ccomplete#Complete
autocmd FileType ruby       setlocal omnifunc=rubycomplete#Complete
autocmd FileType java       setlocal omnifunc=javacomplete#Complete
" autocmd FileType java      setlocal completefunc=javacomplete#CompleteParamsInfo

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
" let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
" let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
" let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

" autocmd FileType ruby let g:neocomplcache_source_disable = {
"   \ 'include_complete' : 1,
"   \ 'omni_complete' : 1
" \ }

" include path
let g:neocomplcache_include_paths = {
  \ 'cpp'  : '.,/opt/local/include/gcc46/c++,/opt/local/include,/usr/include',
  \ 'c'    : '.,/usr/include',
  \ 'ruby' : '.,$HOME/.rbenv/versions/1.9.3-p194/lib/ruby/*',
  \ }
" include pattern
let g:neocomplcache_include_patterns = {
  \ 'cpp' : '^\s*#\s*include',
  \ 'ruby' : '^\s*require',
  \ 'perl' : '^\s*use',
  \ }
" include file name patter
let g:neocomplcache_include_exprs = {
  \ 'ruby' : substitute(v:fname,'::','/','g')
  \ }
" search suffixes
let g:neocomplcache_include_suffixes = {
  \ 'ruby' : '.rb',
  \ 'haskell' : '.hs'
  \ }

"------------------------------------
" neocomplcache-rsense
"------------------------------------
" let g:neocomplcache#sources#rsense#home_directory = neobundle#get_neobundle_dir() . 'rsense-0.3'
