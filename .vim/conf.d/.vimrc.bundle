"---------------------------------------------------------------------
" vim plugins
"---------------------------------------------------------------------
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

if neobundle#has_cache()
  NeoBundleLoadCache
else

" Unite {{{

  " unite
  NeoBundleLazy 'Shougo/unite.vim', {
        \ 'depends' : 'Shougo/neomru.vim',
        \ 'autoload' : {
        \   'commands' : [
        \     'Unite', 'UniteWithCurrentDir',
        \     'UniteWithBufferDir', 'UniteBookmarkAdd',
        \     'UniteWithCursorWord'],
        \ }}

  " outline
  NeoBundleLazy 'Shougo/unite-outline', {
        \ 'depends' : 'Shougo/unite.vim',
        \ 'autoload' : {
        \   'unite_sources' : 'outline',
        \ }}

  " rails
  NeoBundleLazy 'basyura/unite-rails', {
        \ 'depends' : 'Shougo/unite.vim',
        \ 'autoload' : {
        \   'unite_sources' : [
        \     'rails/bundle', 'rails/bundled_gem', 'rails/config',
        \     'rails/controller', 'rails/db', 'rails/destroy',
        \     'rails/features', 'rails/gem', 'rails/gemfile',
        \     'rails/generate', 'rails/git', 'rails/helper',
        \     'rails/heroku', 'rails/initializer', 'rails/javascript',
        \     'rails/lib', 'rails/log', 'rails/mailer',
        \     'rails/model', 'rails/rake', 'rails/route',
        \     'rails/schema', 'rails/spec', 'rails/stylesheet',
        \     'rails/view']
        \ }}

  " tag
  NeoBundleLazy 'tsukkee/unite-tag', {
        \ 'depends' : 'Shougo/unite.vim',
        \ 'autoload' : {
        \   'unite_sources' : 'tag',
        \ }}

  " tig
  NeoBundleLazy 'Kocha/vim-unite-tig', {
        \ 'depends' : 'Shougo/unite.vim',
        \ 'autoload' : {
        \   'unite_sources' : 'tig'
        \ }}

  " codic
  NeoBundleLazy 'koron/codic-vim'
  NeoBundleLazy 'rhysd/unite-codic.vim', {
        \ 'depends' : ['Shougo/unite.vim', 'koron/codic-vim'],
        \ 'autoload' : {
        \   'unite_sources' : 'codic',
        \ }}

" }}}

" Edit {{{

  " manage yank's history
  " NeoBundle 'YankRing.vim', {
  "       \ 'autoload' : { 'commands' : 'YRShow' }}

  " comment
  NeoBundleLazy 'tomtom/tcomment_vim', {
        \ 'autoload' : {
        \   'commands' : ['TComment',
        \     'TCommentAs', 'TCommentMaybeInline']
        \ }}

  NeoBundle 'Yggdroot/indentLine', {
        \ 'autoload' : {
        \   'commands' : ['IndentLinesReset', 'IndentLinesToggle'],
        \ }}

  " support to edit xml,html
  NeoBundleLazy 'xmledit', {
        \ 'autoload' : {
        \   'filetypes' : ['xml', 'html', 'ant'],
        \ }}

  " filtering & align text
  NeoBundleLazy 'godlygeek/tabular', {
        \ 'autoload' : { 'commands' : 'Tab' }}

  " manage undo's history
  NeoBundleLazy 'Gundo', {
        \ 'autoload' : { 'commands' : 'GundoToggle' }}

  " enclose text
  NeoBundleLazy 'tpope/vim-surround', {
        \ 'autoload' : {
        \   'mappings' : [
        \     ['nx', '<Plug>Dsurround'], ['nx', '<Plug>Csurround' ],
        \     ['nx', '<Plug>Ysurround' ], ['nx', '<Plug>YSurround' ],
        \     ['nx', '<Plug>Yssurround'], ['nx', '<Plug>YSsurround'],
        \     ['nx', '<Plug>YSsurround'], ['nx', '<Plug>VgSurround'],
        \     ['nx', '<Plug>VSurround']]
        \ }}

  " toggle text
  NeoBundleLazy 'AndrewRadev/switch.vim', {
        \ 'autoload' : { 'commands' : 'Switch' }}

  " typing sound
  NeoBundleLazy 'calorie/vim-typing-sound', {
        \ 'autoload' : { 'commands' : 'TypingSound' }}

  " visual substitute
  NeoBundleLazy 'osyo-manga/vim-over', {
        \ 'autoload' : { 'commands' : 'OverCommandLine' }}

  " completion for parenthesis
  NeoBundle 'jiangmiao/auto-pairs', {
        \ 'autoload' : { 'insert' : 1 }}

  " textobj {{{

    " create text object
    NeoBundleLazy 'textobj-user'

    " all text
    NeoBundleLazy 'textobj-entire', {
        \ 'depends' : 'textobj-user',
        \ 'autoload' : {
        \   'mappings' : [['nx', '<Plug>(textobj-entire-a)'],
        \     ['nx', '<Plug>(textobj-entire-i)']]
        \ }}

    " function
    NeoBundleLazy 'kana/vim-textobj-function.git', {
        \ 'depends' : 'textobj-user',
        \ 'autoload' : {
        \   'mappings' : [['nx', '<Plug>(textobj-function-a)'],
        \     ['nx', '<Plug>(textobj-function-i)']]
        \ }}

    " indent
    NeoBundleLazy 'kana/vim-textobj-indent.git', {
        \ 'depends' : 'textobj-user',
        \ 'autoload' : {
        \   'mappings' : [
        \     ['nx', '<Plug>(textobj-indent-a)'],
        \     ['nx', '<Plug>(textobj-indent-i)'],
        \     ['nx', '<Plug>(textobj-indent-same-a)'],
        \     ['nx', '<Plug>(textobj-indent-same-i)']]
        \ }}

    " fold
    NeoBundleLazy 'kana/vim-textobj-fold.git', {
          \ 'depends' : 'textobj-user',
          \ 'autoload' : { 'filetypes' : ['vim', 'zsh'] }}

    " ruby syntax
    NeoBundleLazy 'rhysd/vim-textobj-ruby', {
          \ 'depends' : 'textobj-user',
          \ 'autoload' : { 'filetypes' : ['ruby', 'eruby'] }}

  " }}}

" }}}

" Completion {{{

  " completion
  if has('lua')
    NeoBundleLazy 'Shougo/neocomplete.vim', {
          \ 'autoload' : { 'insert' : 1 }}
  else
    NeoBundleLazy 'Shougo/neocomplcache', {
          \ 'autoload' : { 'insert' : 1 }}
  endif

  " snippet completion
  NeoBundleLazy 'Shougo/neosnippet-snippets'
  NeoBundleLazy 'Shougo/neosnippet', {
        \ 'depends' : 'Shougo/neosnippet-snippets',
        \ 'autoload' : {
        \   'commands' : ['NeoSnippetEdit'],
        \   'filetypes' : 'snippet',
        \   'insert' : 1,
        \   'unite_sources' : ['snippet', 'neosnippet/user',
        \     'neosnippet/runtime'],
        \ }}

" }}}

" Searching/Moving {{{

  " intuitive moving
  NeoBundleLazy 'Lokaltog/vim-easymotion', {
      \ 'autoload' : { 'mappings' : ',' }}

  " smart moving
  NeoBundleLazy 'smartword', {
        \ 'autoload' : {
        \   'mappings' : [
        \     '<Plug>(smartword-w)', '<Plug>(smartword-b)',
        \     '<Plug>(smartword-e)', '<Plug>(smartword-ge)']
        \ }}

  " CamelCase,snake_case moving
  NeoBundle 'bkad/CamelCaseMotion', {
        \ 'autoload' : {
        \   'mappings' : [
        \     '<Plug>CamelCaseMotion_w', '<Plug>CamelCaseMotion_b',
        \     '<Plug>CamelCaseMotion_e', '<Plug>CamelCaseMotion_iw',
        \     '<Plug>CamelCaseMotion_ib', '<Plug>CamelCaseMotion_ie'],
        \ }}

  " expand %
  NeoBundleLazy 'edsono/vim-matchit', { 'autoload' : {
        \ 'mappings' : '%' }}

  " expand matchit for ruby
  NeoBundleLazy 'ruby-matchit', { 'autoload' : {
        \ 'filetypes' : ['ruby', 'eruby'] }}

  " open url
  NeoBundleLazy 'tyru/open-browser.vim', {
        \ 'autoload' : {
        \   'mappings' : [['nx', '<Plug>(openbrowser-open)']],
        \   'commands' : 'OpenBrowserSearch',
        \ }}

  " intuitive moving on visual mode
  NeoBundleLazy 't9md/vim-textmanip', { 'autoload' : {
        \ 'mappings' : [
        \   ['x', '<Plug>(textmanip-move-down)'],
        \   ['x', '<Plug>(textmanip-move-up)'],
        \   ['x', '<Plug>(textmanip-move-left)' ],
        \   ['x', '<Plug>(textmanip-move-right)']],
        \ }}

  " expand f moving
  NeoBundle 'rhysd/clever-f.vim', { 'autoload' : {
        \ 'mappings' : [
        \   '<Plug>(clever-f-f)', '<Plug>(clever-f-F)'],
        \ }}

  " window swap
  NeoBundleLazy 'calorie/vim-swap-windows', { 'autoload' : {
        \ 'commands' : [
        \   'MarkWindow', 'SwapWindows'],
        \ }}

  " reload browser
  NeoBundleLazy 'tell-k/vim-browsereload-mac', {
        \ 'autoload' : {
        \   'commands' : ['ChromeReload', 'ChromeReloadStart'],
        \ }}

  " mru
  NeoBundleLazy 'Shougo/neomru.vim'

  " echo the number of match words
  NeoBundleLazy 'osyo-manga/vim-anzu', {
        \ 'autoload' : {
        \   'mappings' : [
        \     '<Plug>(anzu-n-with-echo)',
        \     '<Plug>(anzu-N-with-echo)',
        \     '<Plug>(anzu-star-with-echo)',
        \     '<Plug>(anzu-sharp-with-echo)'
        \   ],
        \ }}

" }}}

" Programming {{{

  " auto create tags
  NeoBundleLazy 'szw/vim-tags', {
        \ 'depends' : 'tpope/vim-dispatch',
        \ 'autoload' : {
        \   'commands' : 'TagsGenerate',
        \ }}

  " run command quickly
  NeoBundleLazy 'thinca/vim-quickrun', {
        \ 'depends' : 'Shougo/vimproc',
        \ 'autoload' : {
        \   'mappings' : [['nxo', '<Plug>(quickrun)']],
        \   'commands' : 'QuickRun',
        \ }}

  " show reference
  NeoBundleLazy 'thinca/vim-ref', {
        \ 'depends': 'Shougo/unite.vim',
        \ 'autoload': {
        \   'commands': 'Ref',
        \   'unite_sources' :
        \     ['ref/refe', 'ref/clojure', 'ref/erlang',
        \      'ref/man', 'ref/perldoc', 'ref/phpmanual',
        \      'ref/pydoc'],
        \ }}

  " basic ruby extension
  NeoBundleLazy 'vim-ruby/vim-ruby', {
        \ 'autoload' : { 'filetypes': ['ruby', 'eruby'] }}

  " basic rails extension
  NeoBundleLazy 'tpope/vim-rails', {
        \ 'autoload' : {
        \   'commands': ['Emodel', 'Econtroller',
        \     'Eview', 'Espec']
        \ }}

  " run rspec
  NeoBundleLazy 'thoughtbot/vim-rspec', {
        \ 'depends'  : 'tpope/vim-dispatch',
        \ 'autoload': {
        \   'functions':
        \     ['RunCurrentSpecFile', 'RunNearestSpec',
        \     'RunLastSpec', 'RunAllSpecs'] }}

  " completion end
  NeoBundle 'tpope/vim-endwise.git', {
        \ 'autoload' : { 'insert' : 1 }}

  " html emmet-vim
  NeoBundleLazy 'mattn/emmet-vim', {
        \ 'autoload': {
        \   'filetypes': ['html', 'eruby', 'php',
        \     'haml', 'css', 'scss', 'sass'],
        \ }}

" }}}

" Syntax {{{

  " syntax checking plugins exist for
  " eruby, haml, html, javascript, php, python, ruby and sass.
  NeoBundleLazy 'scrooloose/syntastic', {
        \ 'autoload': { 'insert' : 1 }}

  " JavaScript
  NeoBundleLazy 'JavaScript-syntax', {
        \ 'autoload': { 'filetypes': 'javascript' }}

  " jQuery
  NeoBundleLazy 'jQuery', {
        \ 'autoload': { 'filetypes': ['javascript', 'coffee'] }}

  " markdown
  NeoBundleLazy 'tpope/vim-markdown', {
        \ 'autoload' : { 'filetypes' : 'markdown' }}

  " coffee script
  NeoBundleLazy 'kchmck/vim-coffee-script', {
        \ 'autoload': { 'filetypes': 'coffee' }}

  " puppet
  NeoBundleLazy 'rodjek/vim-puppet', {
        \ 'autoload': { 'filetypes': 'puppet' }}

  " json
  NeoBundleLazy 'elzr/vim-json', {
        \ 'autoload': { 'filetypes': 'json' }}

  " python
  " NeoBundleLazy 'yuroyoro/vim-python', {
  "       \ 'autoload': { 'filetypes': ['python'] }}

  " nginx
  " NeoBundleLazy 'nginx.vim', {
  "       \ 'autoload': { 'filetypes': ['nginx'] }}

" }}}

" Buffer {{{

  " tree explore
  NeoBundle 'scrooloose/nerdtree', {
        \ 'autoload' : {
        \   'commands' : ['NERDTreeToggle','NERDTreeFind','NERDTree']
        \ }}

  NeoBundleLazy 'bling/vim-bufferline'

  NeoBundleLazy 'junegunn/goyo.vim', {
        \ 'autoload' : {
        \   'commands' : 'Goyo'
        \ }}

  NeoBundleLazy 'junegunn/limelight.vim', {
        \ 'autoload' : {
        \   'commands' : 'Limelight'
        \ }}

" }}}

" Encording {{{

  NeoBundle 'banyan/recognize_charcode.vim'

" }}}

" Utility {{{

  " auto save
  NeoBundle 'vim-scripts/vim-auto-save'

  " async run
  NeoBundleLazy 'Shougo/vimproc', {
        \ 'build' : {
        \   'mac'    : 'make -f make_mac.mak',
        \   'unix'   : 'make -f make_unix.mak',
        \   'cygwin' : 'make -f make_cygwin.mak',
        \ },
        \ 'autoload' : {
        \   'function_prefix' : 'vimproc',
        \ }}

  " cool statusline
  NeoBundle 'bling/vim-airline', {
        \ 'depends': ['bling/vim-bufferline', 'tpope/vim-fugitive']
        \ }

  " async run
  NeoBundleLazy 'tpope/vim-dispatch', {
        \ 'autoload': { 'commands': ['Dispatch', 'Make', 'Start'] }
        \ }

  " sudo vim
  NeoBundleLazy 'vim-scripts/sudo.vim', {
        \ 'autoload': { 'commands': ['SudoRead', 'SudoWrite'] }
        \ }

  " control git
  NeoBundle 'tpope/vim-fugitive', {
        \ 'autoload' : {
        \   'commands': [
        \     'Git', 'Gstatus', 'Gwrite', 'Glog',
        \     'Gcommit', 'Gblame', 'Ggrep', 'Gdiff'],
        \ }}

  " display git diff
  NeoBundleLazy 'airblade/vim-gitgutter', {
        \ 'autoload' : {
        \   'commands': 'GitGutterToggle',
        \   'mappings' : [
        \     '<Plug>GitGutterNextHunk', '<Plug>GitGutterPrevHunk' ]
        \ }}

  " vim Interface to Web API
  NeoBundleLazy 'mattn/webapi-vim'

  " Gist
  NeoBundleLazy 'mattn/gist-vim', {
        \ 'depends': 'mattn/webapi-vim',
        \ 'autoload' : {
        \   'commands' : 'Gist' }}

" }}}

" ColorScheme {{{

  " calorie, jellybeans, wombat, railscasts
  NeoBundle 'calorie/colorschemes'

" }}}

  NeoBundleSaveCache
endif

call neobundle#end()
filetype plugin indent on
