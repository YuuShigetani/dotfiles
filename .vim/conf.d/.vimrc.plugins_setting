"--------------------------------------------------------------------
" Plugins
"--------------------------------------------------------------------

"------------------------------------
" YankRing.vim
"------------------------------------
" {{{
" show history
" nmap ,y :YRShow<CR>
" let g:yankring_zap_keys = ""
" let g:yankring_history_file = '.yankring_history'
" }}}

"------------------------------------
" tabular
"------------------------------------
" {{{
vnoremap tb :Tab /
" }}}

"------------------------------------
" tcomment_vim
"------------------------------------
" {{{
let g:tcommentmaps = 0
nnoremap <silent>gcc :TComment<CR>
vnoremap <silent>gc :TComment<CR>
" }}}

"------------------------------------
" surround.vim
"------------------------------------
" {{{
" select word by s, ss
" nmap s  <Plug>Ysurround
" nmap ss <Plug>Yssurround
nmap ds <Plug>Dsurround
nmap cs <Plug>Csurround
xmap S  <Plug>VSurround
xmap gS <Plug>VgSurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"
" }}}

"------------------------------------
" Fugitive.vim
"------------------------------------
" {{{
nnoremap <Space>gd :<C-u>Gdiff<CR>
nnoremap <Space>gs :<C-u>Gstatus<CR>
nnoremap <Space>gl :<C-u>Glog<CR>
nnoremap <Space>ga :<C-u>Gwrite<CR>
nnoremap <Space>gc :<C-u>Gcommit<CR>
nnoremap <Space>gC :<C-u>Git commit --amend<CR>
nnoremap <Space>gb :<C-u>Gblame<CR>
" }}}

"------------------------------------
" gundo.Vim
"------------------------------------
" {{{
nnoremap U :<C-u>GundoToggle<CR>
" }}}

"------------------------------------
" open-blowser.vim
"------------------------------------
" {{{
" open url
nmap <Leader>o <Plug>(openbrowser-open)
xmap <Leader>o <Plug>(openbrowser-open)
" search word
nnoremap <Leader>os :<C-u>OpenBrowserSearch<Space>
nnoremap <Leader>osw :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
" }}}

"------------------------------------
" vim-browser-reload-linux, mac
"------------------------------------
" {{{
" nnoremap <Leader>rl :ChromeReloadStart<CR>
" nnoremap <Leader>Rl :ChromeReloadStop<CR>
" }}}

"------------------------------------
" smartword.vim
"------------------------------------
" {{{
map W  <Plug>(smartword-w)
map B  <Plug>(smartword-b)
map E  <Plug>(smartword-e)
map ge <Plug>(smartword-ge)
" }}}

"------------------------------------
" camelcasemotion.vim
"------------------------------------
" {{{
" CamelCase,snake_case moving
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e
" use textobj
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie
" }}}

"------------------------------------
" unite.vim
"------------------------------------
" {{{
" The prefix key.
nnoremap [unite] <Nop>
nmap <Space> [unite]

" all
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -auto-preview -buffer-name=all buffer file_mru bookmark file<CR>
" file
nnoremap <silent> [unite]f  :<C-u>Unite -auto-preview -buffer-name=file file<CR>
" buffer
nnoremap <silent> [unite]b  :<C-u>Unite -auto-preview -buffer-name=buffre buffer<CR>
" regulary use
nnoremap <silent> [unite]u  :<C-u>Unite -auto-preview -buffer-name=file_mru buffer file_mru<CR>
" recent use
nnoremap <silent> [unite]m  :<C-u>Unite -auto-preview -buffer-name=mru file_mru<CR>
" file on current directory
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -auto-preview -buffer-name=dir file<CR>
" bookmark
nnoremap <silent> [unite]Ba :<C-u>UniteBookmarkAdd<CR><CR><CR>
nnoremap <silent> [unite]B  :<C-u>Unite -auto-preview -buffer-name=bookmark bookmark<CR>
" grep
nnoremap <silent> [unite]gr :<C-u>Unite -auto-preview -buffer-name=grep -immediately grep:<CR>
nnoremap <silent> [unite]Gr :<C-u>UniteWithCursorWord -auto-preview -buffer-name=grep -immediately grep<CR>
" from basyura/unite-rails
nnoremap <silent> [unite]rm :<C-u>Unite -buffer-name=r_model rails/model<CR>
nnoremap <silent> [unite]rc :<C-u>Unite -buffer-name=r_controller rails/controller<CR>
nnoremap <silent> [unite]rv :<C-u>Unite -buffer-name=r_view rails/view<CR>
nnoremap <silent> [unite]rl :<C-u>Unite -buffer-name=r_lib rails/lib<CR>
nnoremap <silent> [unite]rj :<C-u>Unite -buffer-name=r_js rails/javascript<CR>
nnoremap <silent> [unite]rs :<C-u>Unite -buffer-name=r_spec rails/spec<CR>
nnoremap <silent> [unite]ra :<C-u>Unite -buffer-name=r_rake rails/rake<CR>
" outline
nnoremap <silent> [unite]o  :<C-u>Unite -auto-preview -buffer-name=outline -hide-source-names outline<CR>
" tag
nnoremap <silent> [unite]ta :<C-u>UniteWithCursorWord -auto-preview -buffer-name=tag -no-empty tag<CR>
" tig
" nnoremap <silent> [unite]ti :<C-u>Unite tig -buffer-name=tig -no-start-insert<CR>
" giti
" nnoremap <silent> [unite]gb :<C-u>Unite -buffer-name=giti_branchall -no-start-insert giti/branch_all<CR>
" codic
" nnoremap <silent> [unite]c  :<C-u>Unite codic -start-insert<CR>
" yank
nnoremap <silent> [unite]y  :<C-U>Unite -buffer-name=h_yank -no-empty history/yank<CR>
" ref
nnoremap <silent><buffer> [unite]K :<C-u>Unite -buffer-name=ref/man -start-insert ref/man<CR>
augroup Unite
  autocmd!
  autocmd FileType ruby    nnoremap <silent><buffer> [unite]K :<C-u>Unite -buffer-name=ref/refe -start-insert ref/refe<CR>
  " autocmd FileType python  nnoremap <silent><buffer> [unite]K :<C-u>Unite -buffer-name=ref/pydoc -start-insert ref/pydoc<CR>
  " autocmd FileType php     nnoremap <silent><buffer> [unite]K :<C-u>Unite -buffer-name=ref/phpmanual -start-insert ref/phpmanual<CR>
  " autocmd FileType perl    nnoremap <silent><buffer> [unite]K :<C-u>Unite -buffer-name=ref/perldoc -start-insert ref/perldoc<CR>
  " autocmd FileType clojure nnoremap <silent><buffer> [unite]K :<C-u>Unite -buffer-name=ref/clojure -start-insert ref/clojure<CR>
  " autocmd FileType erlang  nnoremap <silent><buffer> [unite]K :<C-u>Unite -buffer-name=ref/erlang -start-insert ref/erlang<CR>
augroup END

let s:bundle = neobundle#get('unite.vim')
function! s:bundle.hooks.on_source(bundle)

  augroup UniteSettings
    autocmd!
    autocmd FileType unite call s:unite_my_settings()
  augroup END
  function! s:unite_my_settings()
    " Overwrite settings.

    " exit by esc*2
    nmap <buffer> <ESC>      <Plug>(unite_exit)
    nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
    nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
    imap <buffer> <C-w> <Plug>(unite_delete_backward_path)

    " open window
    nnoremap <silent> <buffer> <expr> o unite#do_action('open')

    " open split window
    nnoremap <silent> <buffer> <expr> l     unite#do_action('split')

    " open vsplit window
    nnoremap <silent> <buffer> <expr> s     unite#do_action('vsplit')
  endfunction

  let g:unite_source_history_yank_enable = 1
  let g:unite_source_history_yank_save_clipboard = 1
  let g:unite_split_rule = "rightbelow"
  let g:unite_enable_start_insert = 0
  let g:unite_source_file_mru_limit = 200
  let g:unite_enable_split_vertically = 1
  let g:unite_source_grep_max_candidates = 200
  let g:unite_source_grep_default_opts = "-HnEi"
        \ . " --exclude='*.svn*'"
        \ . " --exclude='*.log*'"
        \ . " --exclude='*tmp*'"
        \ . " --exclude-dir='tmp'"
        \ . " --exclude-dir='log'"
        \ . " --exclude-dir='vendor'"
        \ . " --exclude-dir='CVS'"
        \ . " --exclude-dir='.svn'"
        \ . " --exclude-dir='.git'"
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '-S --nogroup --nocolor --column --hidden'
    let g:unite_source_grep_recursive_opt = ''
  endif

endfunction
unlet s:bundle
" }}}

"------------------------------------
" quickrun.vim
"------------------------------------
" {{{
nnoremap <silent><Leader>r :QuickRun<CR>

let s:bundle = neobundle#get('vim-quickrun')
function! s:bundle.hooks.on_source(bundle)
  let g:quickrun_config = {}
  " let g:quickrun_config._ = {'runner' : 'vimproc'}
  let g:quickrun_config.coffee = {'command' : 'coffee', 'exec' : ['%c -cbp %s']}
  let g:quickrun_config.c = {
        \   'type': 'c/gcc',
        \   'command': 'gcc',
        \   'exec': ['%c %o %s -o %s:p:r -lm', '%s:p:r %a'],
        \   'tempfile': '%{tempname()}.c',
        \   'hook/sweep/files': '%S:p:r',
        \   'cmdopt': '-std=c99 -Wall',
        \   'args': '%{input("argv> ")}',
        \ }
  let g:quickrun_config.tex = {
        \   'command' : 'platex',
        \   'exec': ['%c %s',
        \            'dvipdfmx -o %s:r.pdf %s:r.dvi']
        \ }
  let g:quickrun_config.java = {
        \   'command' : 'ant',
        \   'exec': ['%c']
        \ }
  let g:quickrun_config.markdown = {
        \ 'outputter': 'browser',
        \ 'cmdopt': '-s' }
endfunction
unlet s:bundle
" }}}

"------------------------------------
" NERDTree.vim
"------------------------------------
" {{{
augroup NERDTree
  autocmd!
  " open nerdtree when no args
  autocmd VimEnter * if !argc() && neobundle#is_installed('nerdtree') && neobundle#is_sourced('nerdtree') | NERDTree | endif
  " auto close nerdtree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
  autocmd FileType nerdtree silent! nunmap <buffer> CD
augroup END

nnoremap <Leader>nt :<C-u>NERDTreeToggle<CR>
nnoremap <Leader>nf :<C-u>NERDTreeFind<CR>

let g:NERDTreeShowHidden = 1
let g:NERDTreeWinSize = 20
let g:NERDTreeIgnore = ['.DS_Store', '.gitkeep', '.keep', '\.lo$', '\.o$', '.dirstamp', '.libs', '.deps']
" }}}

"------------------------------------
" vim-ref
"------------------------------------
" {{{
augroup VimRef
  autocmd!
  autocmd FileType ruby,eruby nnoremap <buffer>K :<C-U>Ref refe <C-R><C-W><CR>
augroup END
let g:ref_open = 'vsplit'
let g:ref_refe_cmd = 'refe'
let g:ref_refe_version = 2
" }}}

"------------------------------------
" Gist
"------------------------------------
" {{{
let g:gist_show_privates = 1
nnoremap <Leader>gi :Gist<CR>
nnoremap <Leader>gp :Gist -p<CR>
nnoremap <Leader>ge :Gist -e<CR>
nnoremap <Leader>gs :Gist -s <Space><C-R><C-W><CR>
nnoremap <Leader>gd :Gist -d<CR>
nnoremap <Leader>gl :Gist -l<CR>
" }}}

"------------------------------------
" neosnippets
"------------------------------------
" {{{
imap <C-f>     <Plug>(neosnippet_expand_or_jump)
smap <C-f>     <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

let g:neosnippet#snippets_directory = '~/.vim/bundle/snipmate-snippets/snippets,~/.vim/snippets'

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
" }}}

"------------------------------------
" easy-mosion
"------------------------------------
" {{{
let s:bundle = neobundle#get('vim-easymotion')
function! s:bundle.hooks.on_source(bundle)
  " use close keys
  let g:EasyMotion_keys = 'hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
  " use leader key
  let g:EasyMotion_leader_key = '<Leader>'
  " 1 stroke selection
  let g:EasyMotion_grouping = 1

  " color config
  highlight EasyMotionTarget ctermbg=none ctermfg=red
  highlight EasyMotionShade  ctermbg=none ctermfg=blue
endfunction
unlet s:bundle
" }}}

"------------------------------------
" Syntastic
"------------------------------------
" {{{
let s:bundle = neobundle#get('syntastic')
function! s:bundle.hooks.on_source(bundle)
  " sign error lines
  let g:syntastic_enable_signs = 1
  " enable highlight
  let g:syntastic_enable_highlighting = 1
  let g:syntastic_auto_jump = 0
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 0
  let g:syntastic_echo_current_error = 1
  let g:syntastic_enable_balloons = 1
  let g:syntastic_loc_list_height = 3
  let g:syntastic_quiet_messages = {}

  let g:syntastic_mode_map = {
        \ 'mode'              : 'active',
        \ 'passive_filetypes' : ['html'],
        \}
  let g:syntastic_c_include_dirs = ['inc', '../inc', '/opt/boxen/homebrew/include']
  let g:syntastic_splint_config_file = '~/.splintrc'
  let g:syntastic_c_checkers = ['gcc']
endfunction
unlet s:bundle
" }}}

"------------------------------------
" vim-gitgutter
"------------------------------------
" {{{
nnoremap <Leader>ggt :<C-u>GitGutterToggle<CR>
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
let s:bundle = neobundle#get('vim-gitgutter')
function! s:bundle.hooks.on_source(bundle)
  let g:gitgutter_enabled = 0
  let g:gitgutter_highlight_lines = 1
  let g:gitgutter_map_keys = 0
endfunction
unlet s:bundle
" }}}

"------------------------------------
" vim-rails.vim
"------------------------------------
" {{{
" nnoremap <Space>r :R<CR>
" nnoremap <Space>a :A<CR>
nnoremap <Leader>em :Emodel<CR>
nnoremap <Leader>ec :Econtroller<CR>
nnoremap <Leader>ev :Eview<CR>
nnoremap <Leader>es :Espec<CR>
let s:bundle = neobundle#get('vim-rails')
function! s:bundle.hooks.on_source(bundle)
  let g:rails_some_option = 1
  let g:rails_level = 4
  let g:rails_syntax = 1
  let g:rails_statusline = 1
  let g:rails_url = 'http://localhost:3000'
  let g:rails_subversion = 0
  " let g:dbext_default_SQLITE_bin = 'mysql2'
  let g:rails_default_file = 'config/database.yml'
  " let g:rails_ctags_arguments = ''
endfunction
unlet s:bundle
" }}}

"------------------------------------
" vim-endwise
"------------------------------------
" {{{
" let g:endwise_no_mappings = 1
" }}}

"------------------------------------
" emmet
"------------------------------------
" {{{
let g:zencoding_debug = 0
let g:user_zen_settings = {
      \ 'lang' : 'ja',
      \   'html' : {
      \     'filters' : 'html',
      \     'indentation' : ' '
      \   },
      \   'css' : {
      \     'filters' : 'fc',
      \   },
      \ }
" }}}

"------------------------------------
" vim-tags
"------------------------------------
" {{{
let s:vim_tags_path_prefix = g:is_mac ? '/opt/boxen/homebrew/' : '/usr/'
let g:vim_tags_project_tags_command = s:vim_tags_path_prefix . "bin/ctags -R {OPTIONS} {DIRECTORY} 2>/dev/null"
let g:vim_tags_gems_tags_command = s:vim_tags_path_prefix . "bin/ctags -R {OPTIONS} `bundle show --paths` 2>/dev/null"
let g:vim_tags_auto_generate = 1
let g:vim_tags_use_vim_dispatch = 1
let g:vim_tags_use_ycm = 0
" }}}

"------------------------------------
" text-manipvim
"------------------------------------
" {{{
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-l> <Plug>(textmanip-move-right)
" }}}

"------------------------------------
" sudo.vim
"------------------------------------
" {{{
augroup Sudo
  autocmd!
  autocmd BufReadCmd   sudo:*,sudo:*/* SudoRead <afile>
  autocmd FileReadCmd  sudo:*,sudo:*/* SudoRead <afile>
  autocmd BufWriteCmd  sudo:*,sudo:*/* SudoWrite <afile>
  autocmd FileWriteCmd sudo:*,sudo:*/* SudoWrite <afile>
augroup END
" }}}

"------------------------------------
" clever-f
"------------------------------------
" {{{
map f <Plug>(clever-f-f)
map F <Plug>(clever-f-F)
" }}}

"------------------------------------
" vim-airline
"------------------------------------
" {{{
let g:airline_powerline_fonts = 0
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#left_sep = '⮀'
let g:airline#extensions#tabline#left_alt_sep = '⮁'
let g:airline#extensions#tabline#right_sep = '⮂'
let g:airline#extensions#tabline#right_alt_sep = '⮃'
" let g:airline_left_sep = '⮀'
" let g:airline_left_alt_sep = '⮁'
" let g:airline_right_sep = '⮂'
" let g:airline_right_alt_sep = '⮃'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_branch_prefix = '⭠'
let g:airline_readonly_symbol = '⭤'
let g:airline_linecolumn_prefix = ''
" let g:airline_theme = 'luna'
" let g:airline_theme = 'murmur'
" let g:airline_theme = 'sol'
" let g:airline_theme = 'laederon'
let g:airline_theme = 'raven'
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V-L',
      \ '' : 'V-B',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
" }}}

"------------------------------------
" vim-textobj-entire
"------------------------------------
" {{{
xmap ae <Plug>(textobj-entire-a)
xmap ie <Plug>(textobj-entire-i)
" }}}

"------------------------------------
" vim-textobj-indent
"------------------------------------
" {{{
xmap ai <Plug>(textobj-indent-a)
xmap ii <Plug>(textobj-indent-i)
xmap aI <Plug>(textobj-indent-same-a)
xmap iI <Plug>(textobj-indent-same-i)
" }}}

"------------------------------------
" vim-textobj-function
"------------------------------------
" {{{
xmap af <Plug>(textobj-function-a)
xmap if <Plug>(textobj-function-i)
" }}}

"------------------------------------
" vim-ruby
"------------------------------------
" {{{
let s:bundle = neobundle#get('vim-ruby')
function! s:bundle.hooks.on_source(bundle)
  " let g:ruby_path = system('echo $HOME/.rbenv/shims')
  let g:rubycomplete_rails = 1
  let g:rubycomplete_buffer_loading = 1
  let g:rubycomplete_classes_in_global = 1
endfunction
unlet s:bundle
" }}}

"------------------------------------
" vim-swap-windows
"------------------------------------
" {{{
nnoremap <silent> <leader>mw :MarkWindow<CR>
nnoremap <silent> <leader>pw :SwapWindows<CR>
" }}}

"------------------------------------
" vim-typing-sound
"------------------------------------
" {{{
let g:vim_typing_sound = 0
let g:vim_typing_sound_path = '~/Dropbox/program/sound/seq2_key1.wav'
" let g:vim_typing_sound_path = '~/Dropbox/program/sound/seq6_key1.wav'
" }}}

"------------------------------------
" vim-auto-save
"------------------------------------
" {{{
let g:auto_save = 1
" }}}

"------------------------------------
" vim-over
"------------------------------------
" {{{
nnoremap <Leader>sb :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
vnoremap <Leader>sb "xy:OverCommandLine<CR>%s/<C-R>=escape(@x, '\\/.*$^~[]')<CR>//g<Left><Left>
" }}}

"------------------------------------
" auto-pairs
"------------------------------------
" {{{
let g:AutoPairsMapBS = 0
" }}}

"------------------------------------
" vim-rspec
"------------------------------------
" {{{
" let g:rspec_command = 'Dispatch rspec {spec}'
" augroup VimRspec
"   autocmd!
"   autocmd FileType ruby nmap <silent><Leader>c :call RunNearestSpec()<CR>
"   " autocmd FileType ruby nmap <silent><Leader>c :call RunCurrentSpecFile()<CR>
" augroup END
" }}}

"------------------------------------
" switch.vim
"------------------------------------
" {{{
nnoremap + :Switch<CR>
nnoremap - :call switch#Switch(g:variable_style_switch_definitions)<cr>
let g:switch_custom_definitions =
      \ [
      \   ['+', '-'],
      \   ['*', '/'],
      \   ['and', 'or'],
      \   ['yes', 'no'],
      \   ['if', 'unless'],
      \   ['enable', 'disable'],
      \   ['pick', 'reword', 'fixup', 'squash', 'edit', 'exec'],
      \ ]
let g:variable_style_switch_definitions = [
      \   {
      \     '\<[a-z0-9]\+_\k\+\>': {
      \       '_\(.\)': '\U\1'
      \     },
      \     '\<[a-z0-9]\+[A-Z]\k\+\>': {
      \       '\([A-Z]\)': '_\l\1'
      \     },
      \   }
      \ ]
" }}}

"------------------------------------
" vim-json
"------------------------------------
" {{{
let g:vim_json_syntax_conceal = 0
" }}}

"------------------------------------
" vim-bufferline
"------------------------------------
" {{{
let g:bufferline_echo = 0
" }}}

"------------------------------------
" vim-anzu
"------------------------------------
" {{{
let g:anzu_search_limit = 100
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
" }}}

"------------------------------------
" limelight.vim
"------------------------------------
" {{{
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
" }}}

"------------------------------------
" goyo.vim
"------------------------------------
" {{{
let s:bundle = neobundle#get('goyo.vim')
function! s:bundle.hooks.on_source(bundle)
  function! s:goyo_enter()
    silent !tmux set status off
    set noshowmode
    set noshowcmd
    set scrolloff=999
    Limelight
    TypingSound
  endfunction
  function! s:goyo_leave()
    silent !tmux set status on
    set showmode
    set showcmd
    set scrolloff=5
    set showtabline=1
    Limelight!
    TypingSound
  endfunction
  autocmd! User GoyoEnter
  autocmd! User GoyoLeave
  autocmd  User GoyoEnter nested call <SID>goyo_enter()
  autocmd  User GoyoLeave nested call <SID>goyo_leave()
endfunction
unlet s:bundle
" }}}

"------------------------------------
" indentLine
"------------------------------------
" {{{
let g:indentLine_noConcealCursor = ''
" }}}
