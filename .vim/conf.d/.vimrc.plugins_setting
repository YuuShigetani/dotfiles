"--------------------------------------------------------------------
" プラグインごとの設定 Plugins
"--------------------------------------------------------------------

"------------------------------------
" YankRing.vim
"------------------------------------
"{{{
" Yankの履歴参照
nmap ,y :YRShow<CR>
let g:yankring_zap_keys = ""
let g:yankring_history_file = '.yankring_history'
"}}}

"------------------------------------
" tabular
"------------------------------------
"{{{
vnoremap tb :Tab /
"}}}

"------------------------------------
" tcomment_vim
"------------------------------------
"{{{
let g:tcommentmaps = 0
nnoremap <silent>gcc :TComment<CR>
vnoremap <silent>gc :TComment<CR>
"}}}

" ------------------------------------
" cascading.vim
"------------------------------------
"{{{
" nnoremap <silent>-- :Cascading<CR>
"}}}

"------------------------------------
" surround.vim
"------------------------------------
"{{{
" s, ssで選択範囲を指定文字でくくる
nmap s  <Plug>Ysurround
nmap ss <Plug>Yssurround
nmap ds <Plug>Dsurround
nmap cs <Plug>Csurround
xmap S  <Plug>VSurround
xmap gS <Plug>VgSurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"
"}}}

"------------------------------------
" smartchr.vim
"------------------------------------
"{{{
" let s:bundle = neobundle#get('vim-smartchr')
" function! s:bundle.hooks.on_source(bundle)
"   " inoremap <expr> + smartchr#one_of(' + ', '++', '+')
"   " inoremap <expr> - smartchr#one_of(' - ', '--', '-')
"   " inoremap <expr> / smartchr#one_of(' / ', '// ', '/')
"   " inoremap <expr> ! smartchr#one_of('! ', ' != ', '!')
"   " inoremap <expr> = smartchr#one_of(' = ', ' == ', '=')
"   inoremap <expr> , smartchr#one_of(', ', '->', ' => ')
"
"   if &filetype ==? 'lisp'
"     inoremap <expr> ; smartchr#loop('; ', ';')
"   endif
" endfunction
" unlet s:bundle
"}}}

"------------------------------------
" smartinput.vim
"------------------------------------
"{{{
" let s:bundle = neobundle#get('vim-smartinput')
" function! s:bundle.hooks.on_source(bundle)
"   call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
"   call smartinput#define_rule({ 'char' : '<Space>', 'at' : '(\%#)', 'input' : '<Space><Space><Left>'})
"
"   let lst = [
"         \ ['<',     "smartchr#loop(' < ', ' << ', '<')" ],
"         \ ['>',     "smartchr#loop(' > ', ' >> ', '>')"],
"         \ ['+',     "smartchr#loop(' + ', ' ++ ', '+')"],
"         \ ['-',     "smartchr#loop(' - ', ' -- ', '-')"],
"         \ ['/',     "smartchr#loop(' / ', '//', '/')"],
"         \ ['&',     "smartchr#loop(' & ', ' && ', '&')"],
"         \ ['%',     "smartchr#loop(' % ', '%')"],
"         \ ['*',     "smartchr#loop(' * ', '*')"],
"         \ ['<Bar>', "smartchr#loop(' | ', ' || ', '|')"]]
"
"   for i in lst
"     call smartinput#map_to_trigger('i', i[0], i[0], i[0])
"     call smartinput#define_rule({ 'char' : i[0], 'at' : '\%#', 'input' : '<C-R>=' . i[1] . '<CR>'})
"     if i[0] == '%'
"       call smartinput#define_rule({'char' : i[0], 'at' : '^\([^"]*"[^"]*"\)*[^"]*"[^"]*\%#', 'input' : i[0]})
"     endif
"     call smartinput#define_rule({ 'char' : i[0], 'at' : '^\([^'']*''[^'']*''\)*[^'']*''[^'']*\%#', 'input' : i[0] })
"   endfor
"
"   call smartinput#define_rule({'char' : '>', 'at' : ' < \%#', 'input' : '<BS><BS><BS><><Left>'})
"
"   call smartinput#map_to_trigger('i', '=', '=', '=')
"   call smartinput#define_rule({ 'char' : '=', 'at' : '\%#', 'input' : "<C-R>=smartchr#loop(' = ', ' == ', '=')<CR>"})
"   call smartinput#define_rule({ 'char' : '=', 'at' : '[&+-/<>|] \%#', 'input' : '<BS>= '})
"   call smartinput#define_rule({ 'char' : '=', 'at' : '!\%#', 'input' : '= '})
"   " call smartinput#define_rule({ 'char' : '=', 'at' : '^\([^"]*"[^"]*"\)*[^"]*"[^"]*\%#', 'input' : '='})
"   call smartinput#define_rule({ 'char' : '=', 'at' : '^\([^'']*''[^'']*''\)*[^'']*''[^'']*\%#', 'input' : '='})
"
" "   call smartinput#map_to_trigger('i', '<BS>', '<BS>', '<BS>')
" "   call smartinput#define_rule({ 'char' : '<BS>' , 'at' : '(\s*)\%#'   , 'input' : '<C-O>dF(<BS>'})
" "   call smartinput#define_rule({ 'char' : '<BS>' , 'at' : '{\s*}\%#'   , 'input' : '<C-O>dF{<BS>'})
" "   call smartinput#define_rule({ 'char' : '<BS>' , 'at' : '<\s*>\%#'   , 'input' : '<C-O>dF<<BS>'})
" "   call smartinput#define_rule({ 'char' : '<BS>' , 'at' : '\[\s*\]\%#' , 'input' : '<C-O>dF[<BS>'})
" "
" "   for op in ['<', '>', '+', '-', '/', '&', '%', '*', '|']
" "     call smartinput#define_rule({ 'char' : '<BS>' , 'at' : ' ' . op . ' #/%' , 'input' : '<BS><BS><BS>'})
" "   endfor
"
"   call smartinput#map_to_trigger('i', '*', '*', '*')
"   call smartinput#define_rule({ 'char' : '*', 'at' : 'defparameter \*\%#', 'input' : '*<Left>', 'filetype' : [ 'lisp' ]})
" endfunction
" unlet s:bundle
"}}}

"------------------------------------
" Fugitive.vim
"------------------------------------
"{{{
nnoremap <Space>gd :<C-u>Gdiff<CR>
nnoremap <Space>gs :<C-u>Gstatus<CR>
nnoremap <Space>gl :<C-u>Glog<CR>
nnoremap <Space>ga :<C-u>Gwrite<CR>
nnoremap <Space>gc :<C-u>Gcommit<CR>
nnoremap <Space>gC :<C-u>Git commit --amend<CR>
nnoremap <Space>gb :<C-u>Gblame<CR>
"}}}

"------------------------------------
" vim-indent-guides
"------------------------------------
"{{{
nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<CR>

let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_color_change_percent = 20
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_space_guides = 1

let bundle = neobundle#get('vim-indent-guides')
function! bundle.hooks.on_source(bundle)
  if 'dark' == &background
    hi IndentGuidesOdd  ctermbg=darkgrey
    hi IndentGuidesEven ctermbg=lightgrey
  else
    hi IndentGuidesOdd  ctermbg=white
    hi IndentGuidesEven ctermbg=lightgrey
  endif
endfunction
unlet bundle
"}}}

"------------------------------------
" gundo.Vim
"------------------------------------
"{{{
nnoremap U :<C-u>GundoToggle<CR>
"}}}

"------------------------------------
" open-blowser.vim
"------------------------------------
"{{{
" カーソル下のURLをブラウザで開く
nmap <Leader>o <Plug>(openbrowser-open)
xmap <Leader>o <Plug>(openbrowser-open)
" カーソル下のキーワードをググる
nnoremap <Leader>os :<C-u>OpenBrowserSearch<Space>
nnoremap <Leader>osw :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
"}}}

"------------------------------------
" vim-browser-reload-linux, mac
"------------------------------------
"{{{
nnoremap <Leader>rl :ChromeReloadStart<CR>
nnoremap <Leader>Rl :ChromeReloadStop<CR>
"}}}

"------------------------------------
" operator-camelize.vim
"------------------------------------
"{{{
" camel-caseへの変換
" map <Leader>u <Plug>(operator-camelize)
" map <Leader>U <Plug>(operator-decamelize)
"}}}

"------------------------------------
" operator-replace.vim
"------------------------------------
"{{{
" _wなどでYankしてるもので置き換える
" map _ <Plug>(operator-replace)
"}}}

"------------------------------------
" smartword.vim
"------------------------------------
"{{{
map W  <Plug>(smartword-w)
map B  <Plug>(smartword-b)
map E  <Plug>(smartword-e)
map ge <Plug>(smartword-ge)
"}}}

"------------------------------------
" camelcasemotion.vim
"------------------------------------
"{{{
" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie
"}}}

"------------------------------------
" vimshell
"------------------------------------
"{{{
command! Vs :VimShell -split

let bundle = neobundle#get('vimshell')
function! bundle.hooks.on_source(bundle)

  let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
  " let g:vimshell_right_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
  let g:vimshell_enable_smart_case = 1

  if has('win32') || has('win64')
    " Display user name on Windows.
    let g:vimshell_prompt = $USERNAME."% "
  else
    " Display user name on Linux.
    let g:vimshell_prompt = $USER."% "

    call vimshell#set_execute_file('bmp,jpg,png,gif', 'gexe eog')
    call vimshell#set_execute_file('mp3,m4a,ogg', 'gexe amarok')
    let g:vimshell_execute_file_list['zip'] = 'zipinfo'
    call vimshell#set_execute_file('tgz,gz', 'gzcat')
    call vimshell#set_execute_file('tbz,bz2', 'bzcat')
  endif

  function! g:my_chpwd(args, context)
    call vimshell#execute('echo "chpwd"')
  endfunction
  function! g:my_emptycmd(cmdline, context)
    call vimshell#execute('echo "emptycmd"')
    return a:cmdline
  endfunction
  function! g:my_preprompt(args, context)
    call vimshell#execute('echo "preprompt"')
  endfunction
  function! g:my_preexec(cmdline, context)
    call vimshell#execute('echo "preexec"')

    if a:cmdline =~# '^\s*diff\>'
      call vimshell#set_syntax('diff')
    endif
    return a:cmdline
  endfunction

  autocmd FileType vimshell
        \ call vimshell#altercmd#define('g', 'git')
        \| call vimshell#altercmd#define('i', 'iexe')
        \| call vimshell#altercmd#define('l', 'll')
        \| call vimshell#altercmd#define('ll', 'ls -la')
        \| call vimshell#hook#set('chpwd', ['g:my_chpwd'])
        \| call vimshell#hook#set('emptycmd', ['g:my_emptycmd'])
        \| call vimshell#hook#set('preprompt', ['g:my_preprompt'])
        \| call vimshell#hook#set('preexec', ['g:my_preexec'])

endfunction
unlet bundle
"}}}

"------------------------------------
" unite.vim
"------------------------------------
"{{{
" The prefix key.
nnoremap [unite] <Nop>
nmap <Space> [unite]

" 全部乗せ
nnoremap <silent> [unite]a     :<C-u>UniteWithCurrentDir -auto-preview -buffer-name=all buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f     :<C-u>Unite -auto-preview -buffer-name=file file<CR>
" バッファ一覧
nnoremap <silent> [unite]b     :<C-u>Unite -auto-preview -buffer-name=buffre buffer<CR>
" 常用セット
nnoremap <silent> [unite]u     :<C-u>Unite -auto-preview -buffer-name=file_mru buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m     :<C-u>Unite -auto-preview -buffer-name=mru file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d     :<C-u>UniteWithBufferDir -auto-preview -buffer-name=dir file<CR>
" bookmark
nnoremap <silent> [unite]ba    :<C-u>UniteBookmarkAdd<CR><CR><CR>
nnoremap <silent> [unite]bm    :<C-u>Unite -auto-preview -buffer-name=bookmark bookmark<CR>
" grep
nnoremap <silent> [unite]gr    :<C-u>Unite -auto-preview -buffer-name=grep -immediately grep:<CR>
nnoremap <silent> [unite]Gr    :<C-u>UniteWithCursorWord -auto-preview -buffer-name=grep -immediately grep<CR>
" from basyura/unite-rails
nnoremap <silent> [unite]rm    :<C-u>Unite -buffer-name=r_model rails/model<CR>
nnoremap <silent> [unite]rc    :<C-u>Unite -buffer-name=r_controller rails/controller<CR>
nnoremap <silent> [unite]rv    :<C-u>Unite -buffer-name=r_view rails/view<CR>
nnoremap <silent> [unite]rl    :<C-u>Unite -buffer-name=r_lib rails/lib<CR>
nnoremap <silent> [unite]rj    :<C-u>Unite -buffer-name=r_js rails/javascript<CR>
nnoremap <silent> [unite]rs    :<C-u>Unite -buffer-name=r_spec rails/spec<CR>
nnoremap <silent> [unite]ra    :<C-U>Unite -buffer-name=r_rake rails/rake<CR>
" rake
" nnoremap <silent> [unite]ra    :<C-U>Unite -buffer-name=rake rake<CR>
" help
" nnoremap <silent> [unite]h     :<C-U>Unite -auto-preview -buffer-name=help help<CR>
" outline
nnoremap <silent> [unite]o     :<C-U>Unite -auto-preview -buffer-name=outline -hide-source-names outline<CR>
" history
" nnoremap <silent> [unite]:     :<C-U>Unite -buffer-name=h_command -no-empty history/command<CR>
" nnoremap <silent> [unite]/     :<C-U>Unite -buffer-name=h_search -no-empty history/search<CR>
" nnoremap <silent> [unite]y     :<C-U>Unite -buffer-name=h_yank -no-empty history/yank<CR>
" tag
nnoremap <silent> [unite]ta    :<C-U>UniteWithCursorWord -auto-preview -buffer-name=tag -no-empty tag<CR>
" search
" nnoremap <silent> /            :<C-u>Unite -auto-preview -buffer-name=search line/fast -start-insert -no-quit<CR>
" tweetvim
" nnoremap <silent>[unite]tw     :<C-U>Unite tweetvim -buffer-name=tweetvim -no-start-insert<CR>
" tig
nnoremap <silent>[unite]ti     :<C-u>Unite tig -buffer-name=tig -no-start-insert<CR>
" giti
nnoremap <silent>[unite]br    :<C-U>Unite -buffer-name=giti_branchall -no-start-insert giti/branch_all<CR>

let bundle = neobundle#get('unite.vim')
function! bundle.hooks.on_source(bundle)

  autocmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()
    " Overwrite settings.

    " ESCキーを2回押すと終了する
    nmap <buffer> <ESC>      <Plug>(unite_exit)
    nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
    imap <buffer> jj <Plug>(unite_insert_leave)
    nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
    imap <buffer> <C-w> <Plug>(unite_delete_backward_path)

    " ウィンドウを開く
    nnoremap <silent> <buffer> <expr> o unite#do_action('open')

    " ウィンドウを分割して開く
    nnoremap <silent> <buffer> <expr> l     unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
    inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

    " ウィンドウを縦に分割して開く
    nnoremap <silent> <buffer> <expr> s     unite#do_action('vsplit')
    nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  endfunction

  let g:unite_split_rule = "rightbelow"
  let g:unite_enable_start_insert = 0
  let g:unite_source_file_mru_limit = 200
  let g:unite_enable_split_vertically = 1
  let g:unite_source_grep_max_candidates = 200
  let g:unite_source_grep_default_opts = "-HnEi"
        \ . " --exclude='*.svn*'"
        \ . " --exclude='*.log*'"
        \ . " --exclude='*tmp*'"
        \ . " --exclude-dir='tmp'"
        \ . " --exclude-dir='log'"
        \ . " --exclude-dir='vendor'"
        \ . " --exclude-dir='CVS'"
        \ . " --exclude-dir='.svn'"
        \ . " --exclude-dir='.git'"
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '-S --nogroup --nocolor --column --hidden'
    let g:unite_source_grep_recursive_opt = ''
  endif

endfunction
unlet bundle
"}}}

"------------------------------------
" quickrun.vim
"------------------------------------
"{{{
nnoremap <silent><Leader>r :QuickRun<CR>

let bundle = neobundle#get('vim-quickrun')
function! bundle.hooks.on_source(bundle)
  let g:quickrun_config = {}
  " let g:quickrun_config._ = {'runner' : 'vimproc'}
  let g:quickrun_config.coffee = {'command' : 'coffee', 'exec' : ['%c -cbp %s']}
  let g:quickrun_config.c = {
        \   'type': 'c/gcc',
        \   'command': 'gcc',
        \   'exec': ['%c %o %s -o %s:p:r -lm', '%s:p:r %a'],
        \   'tempfile': '%{tempname()}.c',
        \   'hook/sweep/files': '%S:p:r',
        \   'cmdopt': '-std=c99 -Wall',
        \   'args': '%{input("argv> ")}',
        \ }
  let g:quickrun_config.tex = {
        \   'command' : 'platex',
        \   'exec': ['%c -kanji=euc %s', 'dvipdfmx -o %s:r.pdf %s:r.dvi']
        \ }
  let g:quickrun_config.java = {
        \   'command' : 'ant',
        \   'exec': ['%c']
        \ }
  let g:quickrun_config.markdown = {
        \ 'outputter': 'browser',
        \ 'cmdopt': '-s' }
endfunction
unlet bundle
"}}}

"------------------------------------
" toggle.vim
"------------------------------------
"{{{
nmap <silent> + <Plug>ToggleN
" imap <C-A> <Plug>ToggleI
" vmap <C-A> <Plug>ToggleV

let g:toggle_pairs = {
      \ 'and':'or', 'or':'and', 'if':'unless',
      \ 'unless':'if', 'yes':'no', 'no':'yes',
      \ 'enable':'disable', 'disable':'enable',
      \ 'pick':'reword', 'reword':'fixup',
      \ 'fixup':'squash', 'squash':'edit',
      \ 'edit':'exec', 'exec':'pick' }
"}}}

"------------------------------------
" NERDTree.vim
"------------------------------------
"{{{
" 引数なしでvimを開いたらNERDTreeを起動、引数ありならNERDTreeは起動しない
autocmd VimEnter *
                \ if !argc() |
                \   Startify |
                \   NERDTree |
                \ endif
" 最後にnerdtreeだけ残っていたら自動終了
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

nnoremap <Leader>nt :<C-u>NERDTreeToggle<CR>
nnoremap <Leader>nf :<C-u>NERDTreeFind<CR>

let g:NERDTreeShowHidden = 1
let g:NERDTreeWinSize = 20
"}}}

"------------------------------------
" vim-ref
"------------------------------------
"{{{
autocmd FileType ruby,eruby,ruby.rspec nmap <buffer>K :<C-U>Ref refe <C-R><C-W><CR>
autocmd User Rails nmap <buffer>KK :<C-U>Ref ri <C-R><C-W><CR>

let bundle = neobundle#get('vim-ref')
function! bundle.hooks.on_source(bundle)
  let g:ref_refe_cmd = expand('~/.vim/ref/ruby-refe/refe-1_9_2')
  let g:ref_ri_cmd = expand('~/.rbenv/versions/1.9.3-p194/bin/ri')
endfunction
unlet bundle
"}}}

"------------------------------------
" Gist
"------------------------------------
"{{{
let g:gist_show_privates = 1
nnoremap <Leader>gi :Gist<CR>
nnoremap <Leader>gp :Gist -p<CR>
nnoremap <Leader>ge :Gist -e<CR>
nnoremap <Leader>gs :Gist -s <Space><C-R><C-W><CR>
nnoremap <Leader>gd :Gist -d<CR>
nnoremap <Leader>gl :Gist -l<CR>
"}}}

"------------------------------------
" neosnippets
"------------------------------------
"{{{
imap <C-f>     <Plug>(neosnippet_expand_or_jump)
smap <C-f>     <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

let g:neosnippet#snippets_directory = '~/.vim/bundle/snipmate-snippets/snippets,~/.vim/snippets'

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
"}}}

"------------------------------------
" vim-ibus
"------------------------------------
"{{{
let bundle = neobundle#get('vim-ibus')
function! bundle.hooks.on_source(bundle)
  if has('python')
    autocmd InsertLeave * call ibus#disable()
  endif
endfunction
unlet bundle
"}}}

"------------------------------------
" easy-mosion
"------------------------------------
"{{{
" ホームポジションに近いキーを使う
let g:EasyMotion_keys = 'hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「,」 + 何かにマッピング
let g:EasyMotion_leader_key = "<Leader>"
" 1 ストローク選択を優先する
let g:EasyMotion_grouping = 1

" カラー設定変更
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue
"}}}

"------------------------------------
" ctrlp
"------------------------------------
"{{{
" nnoremap <Space>p :CtrlP ~/<CR>
"
" let g:ctrlp_clear_cache_on_exit = 1
" let g:ctrlp_lazy_update = 1
" let g:ctrlp_regexp = 1
" let g:ctrlp_show_hidden = 1
" let g:ctrlp_use_caching = 1
" let g:ctrlp_custom_ignore = {
"       \ 'dir':  '\.\(hg\|git\|sass-cache\|svn|\~\)$',
"       \ 'file': '\.\(dll\|exe\|gif\|jpg\|png\|psd\|so\|woff\)$' }
"}}}

"------------------------------------
" Syntastic
"------------------------------------
"{{{
let bundle = neobundle#get('syntastic')
function! bundle.hooks.on_source(bundle)
  " エラー行をsignで表示する
  let g:syntastic_enable_signs = 1
  " 可能ならhighligt表示する
  let g:syntastic_enable_highlighting = 1
  let g:syntastic_auto_jump = 0
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 0
  let g:syntastic_echo_current_error = 1
  let g:syntastic_enable_balloons = 1
  let g:syntastic_loc_list_height = 3
  let g:syntastic_quiet_warnings = 0

  let g:syntastic_mode_map = {
        \ 'mode'              : 'active',
        \ 'passive_filetypes' : ['html'],
        \}
  let g:syntastic_c_include_dirs = ['inc', '../inc', '/opt/boxen/homebrew/include']
  let g:syntastic_splint_config_file = '~/.splintrc'
  let g:syntastic_c_checkers = ['gcc']

  function! g:toggle_checkers()
    if &ft == 'ruby'
      if exists('g:syntastic_ruby_checkers')
        unlet g:syntastic_ruby_checkers
      else
        let g:syntastic_ruby_checkers = ['rubocop']
      endif
    elseif &ft == 'c'
      if count(g:syntastic_c_checkers, 'splint') != 0
        let g:syntastic_c_checkers = ['gcc']
      else
        let g:syntastic_c_checkers = ['gcc', 'splint']
      endif
    endif
  endfunction
  nnoremap <Leader>s :call g:toggle_checkers() \| SyntasticCheck<CR>
endfunction
unlet bundle
"}}}

"------------------------------------
" vim-gitgutter
"------------------------------------
"{{{
let g:gitgutter_enabled = 0
nnoremap <Leader>ggt :<C-u>GitGutterToggle<CR>
nnoremap <Leader>ggn :<C-u>GitGutterNextHunk<CR>
nnoremap <Leader>ggp :<C-u>GitGutterPrevHunk<CR>
"}}}

"------------------------------------
" vim-rails.vim
"------------------------------------
"{{{
let bundle = neobundle#get('vim-rails')
function! bundle.hooks.on_source(bundle)
  let g:rails_some_option = 1
  let g:rails_level = 4
  let g:rails_syntax = 1
  let g:rails_statusline = 1
  let g:rails_url = 'http://localhost:3000'
  let g:rails_subversion = 0
  " let g:dbext_default_SQLITE_bin = 'mysql2'
  let g:rails_default_file = 'config/database.yml'
  " let g:rails_ctags_arguments = ''

  " nmap <Space>r :R<CR>
  " nmap <Space>a :A<CR>
  nmap rm :Emodel<CR>
  nmap rc :Econtroller<CR>
  nmap rv :Eview<CR>
  nmap rs :Espec<CR>
  au FileType ruby,eruby,ruby.rspec let g:neocomplete#sources#dictionary#dictionaries = {
        \'ruby' : $HOME.'/.vim/dict/ruby.rails.dict',
        \'eruby' : $HOME.'/.vim/dict/ruby.rails.dict'
        \}
  setl dict+=~/.vim/dict/ruby.rails.dict
  setl dict+=~/.vim/dict/ruby.dict
endfunction
unlet bundle
"}}}

"------------------------------------
" vim-endwise
"------------------------------------
"{{{
" let g:endwise_no_mappings = 1
"}}}

"------------------------------------
" zencoding-vim
"------------------------------------
"{{{
let g:zencoding_debug = 0
let g:user_zen_settings = {
      \ 'lang' : 'ja',
      \   'html' : {
      \     'filters' : 'html',
      \     'indentation' : ' '
      \   },
      \   'css' : {
      \     'filters' : 'fc',
      \   },
      \ }
"}}}

"------------------------------------
" vimfiler
"------------------------------------
"{{{
nnoremap <Leader>vf :<C-u>VimFiler -split -toggle<CR>

let bundle = neobundle#get('vimfiler')
function! bundle.hooks.on_source(bundle)
  let g:vimfiler_ignore_pattern = ''
  let g:vimfiler_enable_clipboard = 0
  let g:vimfiler_safe_mode_by_default = 0

  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_detect_drives =
        \ split(glob('/mnt/*'), '\n') + split(glob('/media/*'), '\n') +
        \ split(glob('/Users/*'), '\n')

  " %p : full path
  " %d : current directory
  " %f : filename
  " %F : filename removed extensions
  " %* : filenames
  " %# : filenames fullpath
  let g:vimfiler_sendto = {
        \ 'unzip' : 'unzip %f',
        \ 'zip' : 'zip -r %F.zip %*',
        \ 'Inkscape' : 'inkspace',
        \ 'GIMP' : 'gimp %*',
        \ 'gedit' : 'gedit',
        \ }

  " Like Textmate icons.
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_file_icon = '-'
  let g:vimfiler_readonly_file_icon = '✗'
  let g:vimfiler_marked_file_icon = '✓'
  " let g:vimfiler_readonly_file_icon = '[O]'

  " let g:vimfiler_quick_look_command =
  "       \ s:is_windows ? 'maComfort.exe -ql' :
  "       \ s:is_mac ? 'qlmanage -p' : 'gloobus-preview'

  autocmd FileType vimfiler call s:vimfiler_my_settings()
  function! s:vimfiler_my_settings()
    call vimfiler#set_execute_file('vim', ['vim', 'notepad'])
    call vimfiler#set_execute_file('txt', 'vim')

    nmap <buffer><CR> <Plug>(vimfiler_edit_file)
    nmap <buffer>o <Plug>(vimfiler_edit_file)
    nmap <buffer>s <Plug>(vimfiler_split_edit_file)
    nnoremap <buffer>i :call vimfiler#mappings#do_action('my_split')<Cr>

    let s:my_action = { 'is_selectable' : 1 }
    function! s:my_action.func(candidates)
      wincmd p
      exec 'split '. a:candidates[0].action__path
    endfunction
    call unite#custom_action('file', 'my_split', s:my_action)

    " Overwrite settings.
    nnoremap <silent><buffer> J
          \ <C-u>:Unite -buffer-name=files -default-action=lcd directory_mru<CR>
    " Call sendto.
    " nnoremap <buffer> - <C-u>:Unite sendto<CR>
    " setlocal cursorline

    nmap <buffer> O <Plug>(vimfiler_sync_with_another_vimfiler)
    nnoremap <silent><buffer><expr> gy vimfiler#do_action('tabopen')
    nmap <buffer> p <Plug>(vimfiler_quick_look)

    " Migemo search.
    if !empty(unite#get_filters('matcher_migemo'))
      nnoremap <silent><buffer><expr> /  line('$') > 10000 ?  'g/' :
            \ ":\<C-u>Unite -buffer-name=search -start-insert line_migemo\<CR>"
    endif

    " One key file operation.
    " nmap <buffer> c <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_copy_file)
    " nmap <buffer> m <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_move_file)
    " nmap <buffer> d <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_delete_file)
  endfunction
endfunction
unlet bundle
"}}}

"------------------------------------
" vim-tags
"------------------------------------
"{{{
let s:vim_tags_path_prefix = g:is_mac ? '/opt/boxen/homebrew/' : '/usr/'
let g:vim_tags_project_tags_command = s:vim_tags_path_prefix . "bin/ctags -R {OPTIONS} {DIRECTORY} 2>/dev/null"
let g:vim_tags_gems_tags_command = s:vim_tags_path_prefix . "bin/ctags -R {OPTIONS} `bundle show --paths` 2>/dev/null"
let g:vim_tags_auto_generate = 1
let g:vim_tags_use_vim_dispatch = 1
let g:vim_tags_use_ycm = 0
"}}}

"------------------------------------
" powertabline
"------------------------------------
"{{{
" let g:alpaca_powertabline_enable = 1
" let g:alpaca_powertabline_sep1 = '⮀'
" let g:alpaca_powertabline_sep2 = '⮁'
" let g:alpaca_powertabline_default_place = 1
"}}}

"------------------------------------
" tagbar.vim
"------------------------------------
"{{{
nnoremap <Space>tb :<C-U>TagbarToggle<CR>

au FileType tagbar
      \ nnoremap <buffer><Space> <Space>
      \|nnoremap <buffer><space>tb :<C-U>TagbarToggle<CR>

if g:is_mac
  let g:tagbar_ctags_bin = '/opt/boxen/homebrew/bin/ctags'
elseif exists('/usr/bin/ctags')
  let g:tagbar_ctags_bin = '/usr/bin/ctags'
endif
let g:tagbar_compact    = 1
let g:tagbar_autofocus  = 1
let g:tagbar_autoshowtag= 1
let g:tagbar_iconchars  =  ['▸', '▾']
let g:tagbar_width = 30
let g:tagbar_autoclose = 1
" let g:tagbar_sort = 0
let g:tagbar_type_javascript = {
      \ 'ctagsbin' : '/usr/local/bin/jsctags',
      \ 'kinds'     : [
      \   'o:object',
      \   'f:function',
      \   'a:array',
      \   's:string'
      \ ]}
let g:tagbar_type_ruby = {
      \ 'kinds'     : [
      \   'm:modules',
      \   'c:classes',
      \   'd:rspec describes',
      \   't:rspec contexts',
      \   'C:constants',
      \   'f:methods',
      \   'F:singleton methods'
      \ ]}
let g:tagbar_type_coffee = {
      \ 'ctagstype' : 'coffee',
      \ 'kinds'     : [
      \   'c:classes',
      \   'm:methods',
      \   'f:functions',
      \   'v:variables',
      \   'f:fields',
      \ ]}
"}}}

"------------------------------------
" text-manipvim
"------------------------------------
"{{{
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-l> <Plug>(textmanip-move-right)
"}}}

"------------------------------------
" sudo.vim
"------------------------------------
"{{{
augroup Sudo
  autocmd!
  au BufReadCmd   sudo:*,sudo:*/* SudoRead <afile>
  au FileReadCmd  sudo:*,sudo:*/* SudoRead <afile>
  au BufWriteCmd  sudo:*,sudo:*/* SudoWrite <afile>
  au FileWriteCmd sudo:*,sudo:*/* SudoWrite <afile>
augroup END
"}}}

"------------------------------------
" clever-f
"------------------------------------
"{{{
map f <Plug>(clever-f-f)
map F <Plug>(clever-f-F)
"}}}

"------------------------------------
" alpaca-tags
"------------------------------------
"{{{
" let g:alpaca_update_tags_config = {
"       \ '_' : '-R --sort=yes',
"       \ 'js' : '--languages=+js',
"       \ '-js' : '--languages=-js,JavaScript',
"       \ 'vim' : '--languages=+Vim,vim',
"       \ '-vim' : '--languages=-Vim,vim',
"       \ '-style': '--languages=-css,sass,scss,js,JavaScript,html',
"       \ 'scss' : '--languages=+scss --languages=-css,sass',
"       \ 'sass' : '--languages=+sass --languages=-css,scss',
"       \ 'css' : '--languages=+css',
"       \ 'java' : '--languages=+java $JAVA_HOME/src',
"       \ 'ruby': '--languages=+Ruby',
"       \ 'coffee': '--languages=+coffee',
"       \ '-coffee': '--languages=-coffee',
"       \ 'bundle': '--languages=+Ruby --languages=-css,sass,scss,js,JavaScript,coffee',
"       \ }

" augroup AlpacaTags
"   autocmd!
"   if exists(':Tags')
"     autocmd BufWritePost * TagsUpdate ruby
"     autocmd BufWritePost Gemfile TagsBundle
"     autocmd BufWritePost * TagsSet
"   endif
" augroup END
"}}}

"------------------------------------
" vim-airline
"------------------------------------
"{{{
let g:airline_powerline_fonts = 0
let g:airline#extensions#tagbar#enabled = 0
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#left_sep = '⮀'
let g:airline#extensions#tabline#left_alt_sep = '⮁'
let g:airline#extensions#tabline#right_sep = '⮂'
let g:airline#extensions#tabline#right_alt_sep = '⮃'
autocmd vimenter * :set showtabline=1
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_branch_prefix = '⭠'
let g:airline_readonly_symbol = '⭤'
let g:airline_linecolumn_prefix = ''
" let g:airline_theme = 'luna'
" let g:airline_theme = 'murmur'
" let g:airline_theme = 'sol'
let g:airline_theme = 'laederon'
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V-L',
      \ '' : 'V-B',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }
"}}}

"------------------------------------
" vim-textobj-entire
"------------------------------------
"{{{
xmap ae <Plug>(textobj-entire-a)
xmap ie <Plug>(textobj-entire-i)
"}}}

"------------------------------------
" vim-textobj-indent
"------------------------------------
"{{{
xmap ai <Plug>(textobj-indent-a)
xmap ii <Plug>(textobj-indent-i)
xmap aI <Plug>(textobj-indent-same-a)
xmap iI <Plug>(textobj-indent-same-i)
"}}}

"------------------------------------
" vim-textobj-comment
"------------------------------------
"{{{
" xmap ac <Plug>(textobj-comment-a)
" xmap ic <Plug>(textobj-comment-i)
"}}}

"------------------------------------
" vim-textobj-function
"------------------------------------
"{{{
xmap af <Plug>(textobj-function-a)
xmap if <Plug>(textobj-function-i)
"}}}

"------------------------------------
" vim-ruby
"------------------------------------
"{{{
" let g:ruby_path = system('echo $HOME/.rbenv/shims')
"}}}

"------------------------------------
" vim-swap-windows
"------------------------------------
"{{{
nnoremap <silent> <leader>mw :MarkWindow<CR>
nnoremap <silent> <leader>pw :SwapWindows<CR>
"}}}

"------------------------------------
" vim-typing-sound
"------------------------------------
"{{{
let g:vim_typing_sound = 0
let g:vim_typing_sound_path = '~/Dropbox/program/sound/seq2_key1.wav'
" let g:vim_typing_sound_path = '~/Dropbox/program/sound/seq6_key1.wav'
"}}}

"------------------------------------
" vim-auto-save
"------------------------------------
"{{{
let g:auto_save = 1
"}}}

"------------------------------------
" vim-over
"------------------------------------
"{{{
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
vnoremap sub "xy:OverCommandLine<CR>%s/<C-R>=escape(@x, '\\/.*$^~[]')<CR>//g<Left><Left>
"}}}

"------------------------------------
" auto-pairs
"------------------------------------
"{{{
let g:AutoPairsMapBS = 0
inoremap <buffer> <silent> <BS> <C-R>=AutoPairsDelete()<CR>
"}}}

"------------------------------------
" vim-startify
"------------------------------------
"{{{
autocmd FileType startify setlocal buftype=
" let NERDTreeHijackNetrw = 0
"}}}
