"------------------------------------
" neocomple.vim
"------------------------------------
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 0
let g:neocomplete#enable_at_startup = 1

let bundle = neobundle#get('neocomplete.vim')
function! bundle.hooks.on_source(bundle)
  let g:neocomplete#disable_auto_complete = 0
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#enable_camel_case = 1
  let g:neocomplete#enable_fuzzy_completion = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#auto_completion_start_length = 2
  let g:neocomplete#manual_completion_start_length = 0
  let g:neocomplete#min_keyword_length = 3
  " let g:neocomple_skip_auto_completion_time = '0.6'
  let g:neocomplete#enable_complete_select = 1
  try
    let completeopt_save = &completeopt
    set completeopt+=noinsert,noselect
  catch
    let g:neocomplete#enable_complete_select = 0
  finally
    let &completeopt = completeopt_save
  endtry
  let g:neocomplete#enable_auto_select = 0
  let g:neocomplete#enable_refresh_always = 0
  let g:neocomplete#enable_cursor_hold_i = 0
  let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default'    : '',
        \ 'scala'      : $HOME.'/.vim/bundle/vim-scala/dict/scala.dict',
        \ 'java'       : $HOME.'/.vim/dict/java.dict',
        \ 'c'          : $HOME.'/.vim/dict/c.dict',
        \ 'cpp'        : $HOME.'/.vim/dict/cpp.dict',
        \ 'javascript' : $HOME.'/.vim/dict/javascript.dict',
        \ 'ocaml'      : $HOME.'/.vim/dict/ocaml.dict',
        \ 'perl'       : $HOME.'/.vim/dict/perl.dict',
        \ 'php'        : $HOME.'/.vim/dict/php.dict',
        \ 'scheme'     : $HOME.'/.vim/dict/scheme.dict',
        \ 'vim'        : $HOME.'/.vim/dict/vim.dict',
        \ 'ruby'       : $HOME.'/.vim/dict/ruby.dict'
        \ }
  let g:neocomplete#enable_auto_delimiter = 1
  let g:neocomplete#disable_auto_select_buffer_name_pattern =
        \ '\[Command Line\]'
  let g:neocomplete#max_list = 100
  let g:neocomplete#force_overwrite_completefunc = 1
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  if !exists('g:neocomplete#sources#omni#functions')
    let g:neocomplete#sources#omni#functions = {}
  endif
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#enable_auto_close_preview = 1
  let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::\w*'
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns._ = '[0-9a-zA-Z:#_]\+'
  let g:neocomplete#keyword_patterns.perl = '\h\w*->\h\w*\|\h\w*::\w*'
  let g:neocomplete#sources#vim#complete_functions = {
        \ 'Ref' : 'ref#complete',
        \ 'Unite' : 'unite#complete_source',
        \ }
  call neocomplete#custom#source('look', 'min_pattern_length', 4)

  inoremap <expr><C-n> pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>\<Down>"
  inoremap <expr><C-p> pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"
  inoremap <expr><C-g> neocomplete#undo_completion()
  inoremap <expr><C-s> neocomplete#complete_common_string()
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return neocomplete#smart_close_popup() . "\<CR>"
  endfunction

endfunction
unlet bundle
