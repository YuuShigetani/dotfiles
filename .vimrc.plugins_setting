"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" YankRing.vim
"------------------------------------
"{{{
" Yankの履歴参照
nmap ,y :YRShow<CR>
let g:yankring_zap_keys = ""
"}}}

"------------------------------------
" MiniBufExplorer
"------------------------------------
"{{{
" let g:miniBufExplMapWindowNavVim=1 "hjklで移動
" let g:miniBufExplSplitBelow=0  " Put new window above
" let g:miniBufExplMapWindowNavArrows=1
" let g:miniBufExplMapCTabSwitchBufs=1
" let g:miniBufExplModSelTarget=1
" let g:miniBufExplSplitToEdge=1
" let g:miniBufExplMaxSize = 1
" let g:miniBufExplorerMoreThanOne = 10
" let g:miniBufExplStatusLineText = ""
"
" " :MtでMiniBufExplorerの表示トグル
" nnoremap <Leader>mt :<C-u>:MBEToggle<CR>
"}}}

"------------------------------------
" Align
"------------------------------------
"{{{
" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3
"}}}

"------------------------------------
" tabular
"------------------------------------
"{{{
vmap t :Tab /
"}}}

"------------------------------------
" tcomment_vim
"------------------------------------
"{{{
let g:tcommentmaps = 0
nnoremap <silent>gcc :TComment<CR>
vnoremap <silent>gc :TComment<CR>
"}}}

"------------------------------------
" NERD_commenter.vim
"------------------------------------
"{{{
" コメントの間にスペースを空ける
" let NERDSpaceDelims = 1
" <Leader>xでコメントをトグル(NERD_commenter.vim)
" map <Leader>x, c<space>
" 未対応ファイルタイプのエラーメッセージを表示しない
" let NERDShutUp=1
"}}}

" ------------------------------------
" cascading.vim
"------------------------------------
"{{{
nnoremap <silent>-- :Cascading<CR>
"}}}

" ------------------------------------
" grep.vim
"------------------------------------
"{{{
" 検索外のディレクトリ、ファイルパターン
" let Grep_Skip_Dirs = '.svn .git .hg'
" let Grep_Skip_Files = '*.bak *~'
"}}}

"------------------------------------
" surround.vim
"------------------------------------
"{{{
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
nmap ds  <Plug>Dsurround
nmap cs  <Plug>Csurround
xmap S   <Plug>VSurround
xmap gS  <Plug>VgSurround
let g:surround_{char2nr('e')} = "begin \r end"
let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"
"}}}

"------------------------------------
" smartchr.vim
"------------------------------------
"{{{
" let bundle = neobundle#get('smartchr')
" function! bundle.hooks.on_source(bundle)
  " inoremap <expr> = smartchr#loop('=', '==', '=>')
  " inoremap <expr> . smartchr#loop('.',  '->', '=>')
  "
  " " 演算子の間に空白を入れる
  " inoremap <buffer><expr> + smartchr#one_of(' + ', ' ++ ', '+')
  " inoremap <buffer><expr> +=  smartchr#one_of(' += ')
  " " inoremap <buffer><expr> - smartchr#one_of(' - ', ' -- ', '-')
  " inoremap <buffer><expr> -=  smartchr#one_of(' -= ')
  " " inoremap <buffer><expr> / smartchr#one_of(' / ', ' // ', '/')
  " inoremap <buffer><expr> /=  smartchr#one_of(' /= ')
  " inoremap <buffer><expr> * smartchr#one_of(' * ', ' ** ', '*')
  " inoremap <buffer><expr> *=  smartchr#one_of(' *= ')
  " inoremap <buffer><expr> & smartchr#one_of(' & ', ' && ', '&')
  " inoremap <buffer><expr> % smartchr#one_of(' % ', '%')
  " inoremap <buffer><expr> =>  smartchr#one_of(' => ')
  " inoremap <buffer><expr> <-   smartchr#one_of(' <-  ')
  " inoremap <buffer><expr> <Bar> smartchr#one_of(' <Bar> ', ' <Bar><Bar> ', '<Bar>')
  " inoremap <buffer><expr> , smartchr#one_of(', ', ',')
  " " 3項演算子の場合は、後ろのみ空白を入れる
  " inoremap <buffer><expr> ? smartchr#one_of('? ', '?')
  " " inoremap <buffer><expr> : smartchr#one_of(': ', '::', ':')

  " " =の場合、単純な代入や比較演算子として入力する場合は前後にスペースをいれる。
  " " 複合演算代入としての入力の場合は、直前のスペースを削除して=を入力
  " inoremap <buffer><expr> = search('¥(&¥<bar><bar>¥<bar>+¥<bar>-¥<bar>/¥<bar>>¥<bar><¥) ¥%#', 'bcn')? '<bs>= '  : search('¥(*¥<bar>!¥)¥%#', 'bcn') ? '= '  : smartchr#one_of(' = ', ' == ', '=')

  " " 下記の文字は連続して現れることがまれなので、二回続けて入力したら改行する
  " inoremap <buffer><expr> } smartchr#one_of('}', '}<cr>')
  " inoremap <buffer><expr> ; smartchr#one_of(';', ';<cr>')
  " "()は空白入れる
  " inoremap <buffer><expr> ( smartchr#one_of('( ')
  " inoremap <buffer><expr> ) smartchr#one_of(' )')

  " " if文直後の(は自動で間に空白を入れる
  " inoremap <buffer><expr> ( search('¥<¥if¥%#', 'bcn')? ' (': '('
" endfunction
" unlet bundle
"}}}

"------------------------------------
" Fugitive.vim
"------------------------------------
"{{{
nnoremap <Space>gd :<C-u>Gdiff<CR>
nnoremap <Space>gs :<C-u>Gstatus<CR>
nnoremap <Space>gl :<C-u>Glog<CR>
nnoremap <Space>ga :<C-u>Gwrite<CR>
nnoremap <Space>gc :<C-u>Gcommit<CR>
nnoremap <Space>gC :<C-u>Git commit --amend<CR>
nnoremap <Space>gb :<C-u>Gblame<CR>
"}}}

"------------------------------------
" VTreeExplorer
"------------------------------------
"{{{
" let g:treeExplVertical=1
" <Leader>t<Space>でディレクトリツリー表示
" noremap <Leader>t<Space> :VSTreeExplore<CR>
" 分割したウィンドウのサイズ
" let g:treeExplWinSize=30
"}}}

"------------------------------------
" DumbBuf.vim
"------------------------------------
"{{{
" <Leader>b<Space>でBufferList
" let dumbbuf_hotkey = '<Leader>b<Space>'
" let dumbbuf_mappings = {
"     \ 'n': {
"         \'<Esc>': { 'opt': '<silent>', 'mapto': ':<C-u>close<CR>' }
"     \}
" \}
" let dumbbuf_single_key  = 1
" let dumbbuf_updatetime  = 1    " &updatetimeの最小値
" let dumbbuf_wrap_cursor = 0
" let dumbbuf_remove_marked_when_close = 1
"}}}

"------------------------------------
" vim-indent-guides
"------------------------------------
"{{{
nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<CR>

let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_color_change_percent = 20
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_space_guides = 1

let bundle = neobundle#get('vim-indent-guides')
function! bundle.hooks.on_source(bundle)
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
  if 'dark' == &background
    hi IndentGuidesOdd  ctermbg=black
    hi IndentGuidesEven ctermbg=darkgrey
  else
    hi IndentGuidesOdd  ctermbg=white
    hi IndentGuidesEven ctermbg=lightgrey
  endif
endfunction
unlet bundle
"}}}

"------------------------------------
" gundo.Vim
"------------------------------------
"{{{
nnoremap U :<C-u>GundoToggle<CR>
"}}}

"------------------------------------
" taglist.Vim
"------------------------------------
"{{{
" map <silent> <leader>tl :Tlist<CR>        " taglistを開くショットカットキー
" nmap <F7> :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
" nmap <Leader>tl :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>

" let Tlist_Ctags_Cmd = '/usr/bin/ctags'
" let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
" let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
" let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
" let Tlist_Enable_Fold_Column = 1          " 折りたたみ
" let Tlist_Auto_Open = 0                   " 自動表示
" let Tlist_Auto_Update = 1
" let Tlist_WinWidth = 30
"}}}

"------------------------------------
" Srcexp
"------------------------------------
"{{{
" [Srcexpl] tagsを利用したソースコード閲覧・移動補助機能
" let g:SrcExpl_UpdateTags    = 1         " tagsをsrcexpl起動時に自動で作成（更新）
" let g:SrcExpl_RefreshTime   = 0         " 自動表示するまでの時間(0:off)
" let g:SrcExpl_WinHeight     = 9         " プレビューウインドウの高さ
" let g:SrcExpl_RefreshMapKey = "<Space>" " 手動表示のMAP
" let g:SrcExpl_GoBackMapKey  = "<C-b>"   " 戻る機能のMAP
" Source Explorerの機能ON/OFF
" nmap <F8> :CMiniBufExplorer<CR>:SrcExplToggle<CR>:TMiniBufExplorer<CR>
"}}}

"------------------------------------
" open-blowser.vim
"------------------------------------
"{{{
" カーソル下のURLをブラウザで開く
nmap <Leader>o <Plug>(openbrowser-open)
vmap <Leader>o <Plug>(openbrowser-open)
" カーソル下のキーワードをググる
nnoremap <Leader>os :<C-u>OpenBrowserSearch<Space>
nnoremap <Leader>osw :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
"}}}

"------------------------------------
" vim-browser-reload-linux, mac
"------------------------------------
"{{{
nnoremap <Leader>rl :ChromeReloadStart<CR>
nnoremap <Leader>Rl :ChromeReloadStop<CR>
"}}}

"------------------------------------
" operator-camelize.vim
"------------------------------------
"{{{
" camel-caseへの変換
map <Leader>u <Plug>(operator-camelize)
map <Leader>U <Plug>(operator-decamelize)
"}}}

"------------------------------------
" operator-replace.vim
"------------------------------------
"{{{
" _wなどでYankしてるもので置き換える
map _ <Plug>(operator-replace)
"}}}

"------------------------------------
" smartword.vim
"------------------------------------
"{{{
noremap ,w  w
noremap ,b  b
noremap ,e  e
noremap ,ge  ge

map W  <Plug>(smartword-w)
map B  <Plug>(smartword-b)
map E  <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)
"}}}

"------------------------------------
" camelcasemotion.vim
"------------------------------------
"{{{
" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie
"}}}

"------------------------------------
" vimshell
"------------------------------------
"{{{
let bundle = neobundle#get('vimshell')
function! bundle.hooks.on_source(bundle)

  let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
  " let g:vimshell_right_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
  let g:vimshell_enable_smart_case = 1

  if has('win32') || has('win64')
    " Display user name on Windows.
    let g:vimshell_prompt = $USERNAME."% "
  else
    " Display user name on Linux.
    let g:vimshell_prompt = $USER."% "

    call vimshell#set_execute_file('bmp,jpg,png,gif', 'gexe eog')
    call vimshell#set_execute_file('mp3,m4a,ogg', 'gexe amarok')
    let g:vimshell_execute_file_list['zip'] = 'zipinfo'
    call vimshell#set_execute_file('tgz,gz', 'gzcat')
    call vimshell#set_execute_file('tbz,bz2', 'bzcat')
  endif

  function! g:my_chpwd(args, context)
    call vimshell#execute('echo "chpwd"')
  endfunction
  function! g:my_emptycmd(cmdline, context)
    call vimshell#execute('echo "emptycmd"')
    return a:cmdline
  endfunction
  function! g:my_preprompt(args, context)
    call vimshell#execute('echo "preprompt"')
  endfunction
  function! g:my_preexec(cmdline, context)
    call vimshell#execute('echo "preexec"')

    if a:cmdline =~# '^\s*diff\>'
      call vimshell#set_syntax('diff')
    endif
    return a:cmdline
  endfunction

  autocmd FileType vimshell
        \ call vimshell#altercmd#define('g', 'git')
        \| call vimshell#altercmd#define('i', 'iexe')
        \| call vimshell#altercmd#define('l', 'll')
        \| call vimshell#altercmd#define('ll', 'ls -la')
        \| call vimshell#hook#set('chpwd', ['g:my_chpwd'])
        \| call vimshell#hook#set('emptycmd', ['g:my_emptycmd'])
        \| call vimshell#hook#set('preprompt', ['g:my_preprompt'])
        \| call vimshell#hook#set('preexec', ['g:my_preexec'])

endfunction
unlet bundle

command! Vs :VimShell -split
"}}}

"------------------------------------
" unite.vim
"------------------------------------
"{{{
" The prefix key.
nnoremap [unite] <Nop>
nmap <Space> [unite]

" 全部乗せ
nnoremap <silent> [unite]a     :<C-u>UniteWithCurrentDir -auto-preview -buffer-name=all buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f     :<C-u>Unite -auto-preview -buffer-name=file file<CR>
" バッファ一覧
nnoremap <silent> [unite]b     :<C-u>Unite -auto-preview -buffer-name=buffre buffer<CR>
" 常用セット
nnoremap <silent> [unite]u     :<C-u>Unite -auto-preview -buffer-name=file_mru buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m     :<C-u>Unite -auto-preview -buffer-name=mru file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d     :<C-u>UniteWithBufferDir -auto-preview -buffer-name=dir file<CR>
" bookmark
nnoremap <silent> [unite]ba    :<C-u>UniteBookmarkAdd<CR><CR><CR>
nnoremap <silent> [unite]bm    :<C-u>Unite -auto-preview -buffer-name=bookmark bookmark<CR>
" grep
nnoremap <silent> [unite]gr    :<C-u>Unite -auto-preview -buffer-name=grep grep:<CR>
" from basyura/unite-rails
nnoremap <silent> [unite]rm    :<C-u>Unite -buffer-name=r_model rails/model<CR>
nnoremap <silent> [unite]rc    :<C-u>Unite -buffer-name=r_controller rails/controller<CR>
nnoremap <silent> [unite]rv    :<C-u>Unite -buffer-name=r_view rails/view<CR>
nnoremap <silent> [unite]rl    :<C-u>Unite -buffer-name=r_lib rails/lib<CR>
nnoremap <silent> [unite]rj    :<C-u>Unite -buffer-name=r_js rails/javascript<CR>
nnoremap <silent> [unite]rs    :<C-u>Unite -buffer-name=r_spec rails/spec<CR>
nnoremap <silent> [unite]ra    :<C-U>Unite -buffer-name=rake rake<CR>
" help
nnoremap <silent> [unite]h     :<C-U>Unite -auto-preview -buffer-name=help help<CR>
" outline
nnoremap <silent> [unite]o     :<C-U>Unite -auto-preview -no-start-insert -buffer-name=outline -hide-source-names outline<CR>
" history
nnoremap <silent> [unite]:     :<C-U>Unite -buffer-name=h_command -no-empty history/command<CR>
nnoremap <silent> [unite]/     :<C-U>Unite -buffer-name=h_search -no-empty history/search<CR>
nnoremap <silent> [unite]y     :<C-U>Unite -buffer-name=h_yank -no-empty history/yank<CR>
" tag
nnoremap <silent> [unite]ta    :<C-U>Unite -auto-preview -buffer-name=tag -no-empty tag<CR>
nnoremap <buffer> <C-]>        :<C-u>UniteWithCursorWord -auto-preview tag<CR>
" search
" nnoremap <silent> /            :<C-u>Unite -auto-preview -buffer-name=search line/fast -start-insert -no-quit<CR>
" tweetvim
" nnoremap <silent>[unite]tw     :<C-U>Unite tweetvim -buffer-name=tweetvim -no-start-insert<CR>
" tig
nnoremap <silent>[unite]ti     :<C-u>Unite tig -buffer-name=tig -no-start-insert<CR>
" giti
nnoremap <silent>[unite]gs     :<C-U>Unite -buffer-name=giti_status -no-start-insert -horizontal giti/status<CR>
nnoremap <silent>[unite]gba    :<C-U>Unite -buffer-name=giti_branchall -no-start-insert giti/branch_all<CR>

let bundle = neobundle#get('unite.vim')
function! bundle.hooks.on_source(bundle)

  autocmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()
    " Overwrite settings.

    " ESCキーを2回押すと終了する
    nmap <buffer> <ESC>      <Plug>(unite_exit)
    nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
    imap <buffer> jj <Plug>(unite_insert_leave)
    nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
    imap <buffer> <C-w> <Plug>(unite_delete_backward_path)

    " ウィンドウを開く
    nnoremap <silent> <buffer> <expr> o unite#do_action('open')

    " ウィンドウを分割して開く
    nnoremap <silent> <buffer> <expr> l     unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
    inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

    " ウィンドウを縦に分割して開く
    nnoremap <silent> <buffer> <expr> s     unite#do_action('vsplit')
    nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  endfunction

  let g:unite_split_rule = "rightbelow"
  let g:unite_enable_start_insert = 0
  let g:unite_source_file_mru_limit = 200
  let g:unite_enable_split_vertically = 1
  let g:unite_source_grep_max_candidates = 200
  let g:unite_source_grep_default_opts = "-HnEi"
        \ . " --exclude='*.svn*'"
        \ . " --exclude='*.log*'"
        \ . " --exclude='*tmp*'"
        \ . " --exclude-dir='tmp'"
        \ . " --exclude-dir='log'"
        \ . " --exclude-dir='vendor'"
        \ . " --exclude-dir='CVS'"
        \ . " --exclude-dir='.svn'"
        \ . " --exclude-dir='.git'"

endfunction
unlet bundle
"}}}

"------------------------------------
" quickrun.vim
"------------------------------------
"{{{
nnoremap <silent><Leader>r :QuickRun<CR>

let bundle = neobundle#get('vim-quickrun')
function! bundle.hooks.on_source(bundle)
  let g:quickrun_config = {}
  " let g:quickrun_config._ = {'runner' : 'vimproc'}
  let g:quickrun_config.coffee = {'command' : 'coffee', 'exec' : ['%c -cbp %s']}
  let g:quickrun_config.c = {
        \   'type': 'c/gcc',
        \   'command': 'gcc',
        \   'exec': ['%c %o %s -o %s:p:r -lm', '%s:p:r %a'],
        \   'tempfile': '%{tempname()}.c',
        \   'hook/sweep/files': '%S:p:r',
        \   'cmdopt': '-std=c99 -Wall',
        \   'args': '%{input("argv> ")}',
        \ }
  let g:quickrun_config.tex = {
        \   'command' : 'platex',
        \   'exec': ['%c -kanji=euc %s', 'dvipdfmx -o %s:r.pdf %s:r.dvi']
        \ }
  let g:quickrun_config.java = {
        \   'command' : 'ant',
        \   'exec': ['%c']
        \ }
  let g:quickrun_config.markdown = {
        \ 'outputter': 'browser',
        \ 'cmdopt': '-s' }
endfunction
unlet bundle
"}}}

"------------------------------------
" Pydiction
"------------------------------------
"{{{
let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'
"}}}

"------------------------------------
" toggle.vim
"------------------------------------
"{{{
nmap <silent> + <Plug>ToggleN
" imap <C-A> <Plug>ToggleI
" vmap <C-A> <Plug>ToggleV

let g:toggle_pairs = {
      \ 'and':'or', 'or':'and', 'if':'unless',
      \ 'unless':'if', 'yes':'no', 'no':'yes',
      \ 'enable':'disable', 'disable':'enable',
      \ 'pick':'reword', 'reword':'fixup',
      \ 'fixup':'squash', 'squash':'edit',
      \ 'edit':'exec', 'exec':'pick' }
"}}}

"------------------------------------
" NERDTree.vim
"------------------------------------
"{{{
" 引数なしでvimを開いたらNERDTreeを起動、引数ありならNERDTreeは起動しない
" 最後にnerdtreeだけ残っていたら自動終了
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

nnoremap <Leader>nt :<C-u>NERDTreeToggle<CR>
nnoremap <Leader>nf :<C-u>NERDTreeFind<CR>

let g:NERDTreeShowHidden = 1
let g:NERDTreeWinSize = 20
"}}}

"------------------------------------
" vim-ref
"------------------------------------
"{{{
autocmd FileType ruby,eruby,ruby.rspec nmap <buffer>K :<C-U>Ref refe <C-R><C-W><CR>
autocmd User Rails nmap <buffer>KK :<C-U>Ref ri <C-R><C-W><CR>

let bundle = neobundle#get('vim-ref')
function! bundle.hooks.on_source(bundle)
  let g:ref_refe_cmd = expand('~/.vim/ref/ruby-refe/refe-1_9_2')
  let g:ref_ri_cmd = expand('~/.rbenv/versions/1.9.3-p194/bin/ri')
endfunction
unlet bundle
"}}}

"------------------------------------
" Gist
"------------------------------------
"{{{
let g:gist_show_privates = 1
nnoremap <Leader>gi :Gist<CR>
nnoremap <Leader>gp :Gist -p<CR>
nnoremap <Leader>ge :Gist -e<CR>
nnoremap <Leader>gs :Gist -s <Space><C-R><C-W><CR>
nnoremap <Leader>gd :Gist -d<CR>
nnoremap <Leader>gl :Gist -l<CR>
"}}}

"------------------------------------
" neosnippets
"------------------------------------
"{{{
imap <C-f>     <Plug>(neosnippet_expand_or_jump)
smap <C-f>     <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

let g:neosnippet#snippets_directory = '~/.vim/bundle/snipmate-snippets/snippets,~/.vim/snippets'

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
"}}}

"------------------------------------
" vim-ibus
"------------------------------------
"{{{
let bundle = neobundle#get('vim-ibus')
function! bundle.hooks.on_source(bundle)
  if has('python')
    autocmd InsertLeave * call ibus#disable()
  endif
endfunction
unlet bundle
"}}}

"------------------------------------
" easy-mosion
"------------------------------------
"{{{
" ホームポジションに近いキーを使う
let g:EasyMotion_keys = 'hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「,」 + 何かにマッピング
let g:EasyMotion_leader_key = "<Leader>"
" 1 ストローク選択を優先する
let g:EasyMotion_grouping = 1

" カラー設定変更
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue
"}}}

"------------------------------------
" ctrlp
"------------------------------------
"{{{
nnoremap <Space>p :CtrlP ~/<CR>

let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_lazy_update = 1
let g:ctrlp_regexp = 1
let g:ctrlp_show_hidden = 1
let g:ctrlp_use_caching = 1
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.\(hg\|git\|sass-cache\|svn|\~\)$',
      \ 'file': '\.\(dll\|exe\|gif\|jpg\|png\|psd\|so\|woff\)$' }
"}}}

"------------------------------------
" Syntastic
"------------------------------------
"{{{
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1
let g:syntastic_auto_jump = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_echo_current_error = 1
let g:syntastic_enable_balloons = 1
let g:syntastic_loc_list_height = 3
let g:syntastic_quiet_warnings = 0

let g:syntastic_mode_map = {
      \ 'mode'              : 'active',
      \ 'active_filetypes'  : [],
      \ 'passive_filetypes' : ["html"],
      \}
"}}}

"------------------------------------
" vim-gitgutter
"------------------------------------
"{{{
let g:gitgutter_enabled = 0
nnoremap <Leader>ggt :<C-u>GitGutterToggle<CR>
nnoremap <Leader>ggn :<C-u>GitGutterNextHunk<CR>
nnoremap <Leader>ggp :<C-u>GitGutterPrevHunk<CR>
"}}}

"------------------------------------
" vim-rails.vim
"------------------------------------
"{{{
let bundle = neobundle#get('vim-rails')
function! bundle.hooks.on_source(bundle)
  let g:rails_some_option = 1
  let g:rails_level = 4
  let g:rails_syntax = 1
  let g:rails_statusline = 1
  let g:rails_url = 'http://localhost:3000'
  let g:rails_subversion = 0
  " let g:dbext_default_SQLITE_bin = 'mysql2'
  let g:rails_default_file = 'config/database.yml'
  " let g:rails_ctags_arguments = ''

  " nmap <Space>r :R<CR>
  " nmap <Space>a :A<CR>
  nmap rm :Emodel<CR>
  nmap rc :Econtroller<CR>
  nmap rv :Eview<CR>
  nmap rs :Espec<CR>
  au FileType ruby,eruby,ruby.rspec let g:neocomplete#sources#dictionary#dictionaries = {
        \'ruby' : $HOME.'/.vim/dict/ruby.rails.dict',
        \'eruby' : $HOME.'/.vim/dict/ruby.rails.dict'
        \}
  setl dict+=~/.vim/dict/ruby.rails.dict
  setl dict+=~/.vim/dict/ruby.dict
endfunction
unlet bundle
"}}}

"------------------------------------
" vim-endwise
"------------------------------------
"{{{
let g:endwise_no_mappings = 1
"}}}

"------------------------------------
" zencoding-vim
"------------------------------------
"{{{
let g:zencoding_debug = 0
let g:user_zen_settings = {
      \ 'lang' : 'ja',
      \   'html' : {
      \     'filters' : 'html',
      \     'indentation' : ' '
      \   },
      \   'css' : {
      \     'filters' : 'fc',
      \   },
      \ }
"}}}

"------------------------------------
" vimfiler
"------------------------------------
"{{{
" nnoremap <silent> <Space>v :<C-u>VimFiler<CR>
nnoremap <Leader>vf :<C-u>VimFilerExplorer -winwidth=20 -toggle<CR>

let bundle = neobundle#get('vimfiler')
function! bundle.hooks.on_source(bundle)
  let g:vimfiler_enable_clipboard = 0
  let g:vimfiler_safe_mode_by_default = 0

  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_detect_drives =
        \ split(glob('/mnt/*'), '\n') + split(glob('/media/*'), '\n') +
        \ split(glob('/Users/*'), '\n')

  " %p : full path
  " %d : current directory
  " %f : filename
  " %F : filename removed extensions
  " %* : filenames
  " %# : filenames fullpath
  let g:vimfiler_sendto = {
        \ 'unzip' : 'unzip %f',
        \ 'zip' : 'zip -r %F.zip %*',
        \ 'Inkscape' : 'inkspace',
        \ 'GIMP' : 'gimp %*',
        \ 'gedit' : 'gedit',
        \ }

  " Like Textmate icons.
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_file_icon = '-'
  let g:vimfiler_readonly_file_icon = '✗'
  let g:vimfiler_marked_file_icon = '✓'
  " let g:vimfiler_readonly_file_icon = '[O]'

  " let g:vimfiler_quick_look_command =
  "       \ s:is_windows ? 'maComfort.exe -ql' :
  "       \ s:is_mac ? 'qlmanage -p' : 'gloobus-preview'

  autocmd FileType vimfiler call s:vimfiler_my_settings()
  function! s:vimfiler_my_settings()
    call vimfiler#set_execute_file('vim', ['vim', 'notepad'])
    call vimfiler#set_execute_file('txt', 'vim')

    nmap <buffer><CR> <Plug>(vimfiler_edit_file)
    nmap <buffer>o <Plug>(vimfiler_edit_file)
    nmap <buffer>s <Plug>(vimfiler_split_edit_file)
    nnoremap <buffer>i :call vimfiler#mappings#do_action('my_split')<Cr>

    let s:my_action = { 'is_selectable' : 1 }
    function! s:my_action.func(candidates)
      wincmd p
      exec 'split '. a:candidates[0].action__path
    endfunction
    call unite#custom_action('file', 'my_split', s:my_action)

    " Overwrite settings.
    nnoremap <silent><buffer> J
          \ <C-u>:Unite -buffer-name=files -default-action=lcd directory_mru<CR>
    " Call sendto.
    " nnoremap <buffer> - <C-u>:Unite sendto<CR>
    " setlocal cursorline

    nmap <buffer> O <Plug>(vimfiler_sync_with_another_vimfiler)
    nnoremap <silent><buffer><expr> gy vimfiler#do_action('tabopen')
    nmap <buffer> p <Plug>(vimfiler_quick_look)

    " Migemo search.
    if !empty(unite#get_filters('matcher_migemo'))
      nnoremap <silent><buffer><expr> /  line('$') > 10000 ?  'g/' :
            \ ":\<C-u>Unite -buffer-name=search -start-insert line_migemo\<CR>"
    endif

    " One key file operation.
    " nmap <buffer> c <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_copy_file)
    " nmap <buffer> m <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_move_file)
    " nmap <buffer> d <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_delete_file)
  endfunction
endfunction
unlet bundle
"}}}

"------------------------------------
" vim-powerline
"------------------------------------
"{{{
let g:Powerline_symbols = 'fancy'
let g:Powerline_stl_path_style = 'filename'
let g:Powerline_mode_n  = ' N '
let g:Powerline_mode_i  = ' I '
let g:Powerline_mode_R  = ' R '
let g:Powerline_mode_v  = ' V '
let g:Powerline_mode_V  = 'V･L'
let g:Powerline_mode_cv = 'V･B'
let g:Powerline_mode_s  = ' S '
let g:Powerline_mode_S  = 'S･L'
let g:Powerline_mode_cs = 'S･B'
"}}}

"------------------------------------
" vim-tags
"------------------------------------
"{{{
let g:vim_tags_auto_generate = 1
let g:vim_tags_use_vim_dispatch = 1
let g:vim_tags_use_ycm = 0
"}}}

"------------------------------------
" tweetvim
"------------------------------------
"{{{
let g:tweetvim_async_post = 1
let g:tweetvim_display_source = 1
let g:tweetvim_display_time = 1
let g:tweetvim_open_buffer_cmd = 'tabnew'
nnoremap <silent>tw :<C-U>TweetVimSay<CR>
"}}}

"------------------------------------
" powertabline
"------------------------------------
"{{{
set showtabline=1
let g:alpaca_powertabline_enable = 1
let g:alpaca_powertabline_sep1 = "⮀"
let g:alpaca_powertabline_sep2 = "⮁"
let g:alpaca_powertabline_default_place = 1
"}}}

"------------------------------------
" tagbar.vim
"------------------------------------
"{{{
nnoremap <Space>tb :<C-U>TagbarToggle<CR>

au FileType tagbar
      \ nnoremap <buffer><Space> <Space>
      \|nnoremap <buffer><space>tb :<C-U>TagbarToggle<CR>

if exists('/usr/bin/ctags')
  let g:tagbar_ctags_bin = '/usr/bin/ctags'
endif
let g:tagbar_compact    = 1
let g:tagbar_autofocus  = 1
let g:tagbar_autoshowtag= 1
let g:tagbar_iconchars  =  ['▸', '▾']
let g:tagbar_width = 30
let g:tagbar_autoclose = 1
" let g:tagbar_sort = 0
"}}}

"------------------------------------
" text-manipvim
"------------------------------------
"{{{
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-l> <Plug>(textmanip-move-right)
"}}}

"------------------------------------
" vim-ruby-refactoring
"------------------------------------
"{{{
let bundle = neobundle#get('vim-ruby-refactoring')
function! bundle.hooks.on_source(bundle)
  " メソッドに引数を追加する
  nnoremap <Space>ap  :RAddParameter<CR>
  " 一行で書かれた条件文を伝統的な複数行の形式に変換する
  " nnoremap <Space>rcpc :RConvertPostConditional<CR>
  " 選択部分を RSpec の "let(:hoge) { fuga }" の形式に切り出す
  " nnoremap <Space>el  :RExtractLet<CR>
  " 選択部分を定数として切り出す
  vnoremap <Space>ec  :RExtractConstant<CR>
  " 選択部分を変数として切り出す
  vnoremap <Space>el :RExtractLocalVariable<CR>
  " 一時変数を取り除く
  nnoremap <Space>et  :RInlineTemp<CR>
  " 選択部分をメソッドに切り出す
  vnoremap <Space>em  :RExtractMethod<CR>
  " ローカル変数をリネームする
  vnoremap <Space>rl :RRenameLocalVariable<CR>
  " インスタンス変数をリネームする
  vnoremap <Space>ri :RRenameInstanceVariable<CR>
endfunction
unlet bundle
"}}}

"------------------------------------
" sudo.vim
"------------------------------------
"{{{
augroup Sudo
  autocmd!
  au BufReadCmd   sudo:*,sudo:*/* SudoRead <afile>
  au FileReadCmd  sudo:*,sudo:*/* SudoRead <afile>
  au BufWriteCmd  sudo:*,sudo:*/* SudoWrite <afile>
  au FileWriteCmd sudo:*,sudo:*/* SudoWrite <afile>
augroup END
"}}}

"------------------------------------
" clever-f
"------------------------------------
"{{{
map f <Plug>(clever-f-f)
map F <Plug>(clever-f-F)
"}}}

"------------------------------------
" alpaca-tags
"------------------------------------
"{{{
let g:alpaca_update_tags_config = {
      \ '_' : '-R --sort=yes',
      \ 'js' : '--languages=+js',
      \ '-js' : '--languages=-js,JavaScript',
      \ 'vim' : '--languages=+Vim,vim',
      \ '-vim' : '--languages=-Vim,vim',
      \ '-style': '--languages=-css,sass,scss,js,JavaScript,html',
      \ 'scss' : '--languages=+scss --languages=-css,sass',
      \ 'sass' : '--languages=+sass --languages=-css,scss',
      \ 'css' : '--languages=+css',
      \ 'java' : '--languages=+java $JAVA_HOME/src',
      \ 'ruby': '--languages=+Ruby',
      \ 'coffee': '--languages=+coffee',
      \ '-coffee': '--languages=-coffee',
      \ 'bundle': '--languages=+Ruby --languages=-css,sass,scss,js,JavaScript,coffee',
      \ }

" augroup AlpacaTags
"   autocmd!
"   if exists(':Tags')
"     autocmd BufWritePost * TagsUpdate ruby
"     autocmd BufWritePost Gemfile TagsBundle
"     autocmd BufEnter * TagsSet
"   endif
" augroup END
"}}}

"------------------------------------
" vim-airline
"------------------------------------
"{{{
let g:airline_powerline_fonts = 0
let g:airline_left_sep = "⮀"
let g:airline_left_alt_sep = "⮁"
let g:airline_right_sep = "⮂"
let g:airline_right_alt_sep = "⮃"
let g:airline_theme = 'powerlineish'
let g:airline_branch_prefix = '⭠ '
let g:airline_readonly_symbol = '⭤ '
let g:airline_linecolumn_prefix = '⭡ '
let g:airline_mode_map = {
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'v'  : 'V',
      \ 'V'  : 'V-L',
      \ 'c'  : 'C',
      \ ''   : 'V-B',
      \ }
"}}}

"------------------------------------
" vim-bufferline
"------------------------------------
"{{{
let g:bufferline_echo = 0
let g:bufferline_rotate = 2
"}}}

"------------------------------------
" vim-textobj-entire
"------------------------------------
"{{{
" nmap ae <Plug>(textobj-entire-a)
" nmap ie <Plug>(textobj-entire-i)
xmap ae <Plug>(textobj-entire-a)
xmap ie <Plug>(textobj-entire-i)
"}}}

"------------------------------------
" vim-textobj-indent
"------------------------------------
"{{{
" nmap ai <Plug>(textobj-indent-a)
" nmap ii <Plug>(textobj-indent-i)
" nmap aI <Plug>(textobj-indent-same-a)
" nmap iI <Plug>(textobj-indent-same-i)
xmap ai <Plug>(textobj-indent-a)
xmap ii <Plug>(textobj-indent-i)
xmap aI <Plug>(textobj-indent-same-a)
xmap iI <Plug>(textobj-indent-same-i)
"}}}

"------------------------------------
" vim-textobj-comment
"------------------------------------
"{{{
" nmap ac <Plug>(textobj-comment-a)
" nmap ic <Plug>(textobj-comment-i)
xmap ac <Plug>(textobj-comment-a)
xmap ic <Plug>(textobj-comment-i)
"}}}
